{"version":3,"file":"static/js/507.64d61dd8.chunk.js","mappings":"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","sources":["webpack://hustlencode.io/./src/pages/profile_pages/ProfilePosts/PostFeed/PostFeed.module.scss?a0d8","pages/profile_pages/ProfilePosts/PostFeed/PostFeed.tsx","hooks/posts/usePosts.ts","pages/profile_pages/ProfilePosts/ProfilePosts.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loader\":\"PostFeed_loader__+adHy\",\"emptyFeed\":\"PostFeed_emptyFeed__l9g4J\"};","import PageLoader from 'components/PageLoader/PageLoader';\r\nimport PostModule from 'components/PostModule/PostModule';\r\nimport Aux from 'components/_Aux/_Aux';\r\nimport usePosts from 'hooks/posts/usePosts';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n// styles\r\nimport classes from './PostFeed.module.scss';\r\n\r\n/**\r\n * This component renders the users post feed and the\r\n * create post module\r\n * @param param0\r\n * @returns\r\n */\r\nconst PostFeed = ({ username }: { username: string }) => {\r\n  // get user's post feed\r\n  const posts = usePosts(username);\r\n\r\n  /**\r\n   * Shows loader\r\n   * @returns\r\n   * - loader html\r\n   */\r\n  const renderPageLoader = () => (\r\n    <div style={{ height: '100%', width: '100%' }}>\r\n      <PageLoader isVisible={true} fullscreen={false} theme={'light'} />\r\n    </div>\r\n  );\r\n\r\n  /**\r\n   * Renders users posts\r\n   * @returns\r\n   */\r\n  const renderPosts = () => (\r\n    <InfiniteScroll\r\n      dataLength={posts.value.length}\r\n      next={posts.pullMorePosts}\r\n      hasMore={posts.postCount > posts.value.length}\r\n      loader={<div className={classes.loader}><FontAwesomeIcon style={{ color: '#282828',  }} spin icon={faSpinner} /></div>}\r\n      endMessage={\r\n        <p style={{ textAlign: 'center', paddingTop: 35 }}>\r\n          <b>End of feed</b>\r\n        </p>\r\n      }\r\n    >\r\n      {posts.value.map(post => (\r\n        <PostModule\r\n          postId={post._id}\r\n          createdOn={post.createdOn}\r\n          postUser={post.user}\r\n          key={post._id}\r\n          html={post.html}\r\n          css={post.css}\r\n          js={post.js}\r\n          removePost={posts.removePost}\r\n        />\r\n      ))}\r\n    </InfiniteScroll>\r\n  );\r\n\r\n  const renderEmptyFeed = () => (\r\n    <div className={classes.emptyFeed}>\r\n      <p>{username} hasn't posted yet</p>\r\n    </div>\r\n  );\r\n\r\n  return <Aux>{posts.isLoading ? renderPageLoader() : posts.value.length > 0 ? renderPosts() : renderEmptyFeed()}</Aux>;\r\n};\r\n\r\nexport default PostFeed;\r\n","import { useEffect, useState } from 'react';\r\nimport { serverErrorHandler } from 'services/server-error.service';\r\nimport { useAppDispatch } from 'store/hooks';\r\nimport { logout } from 'store/slices/userSessionSlice';\r\nimport { IHustlencodePost } from 'interfaces/post.interface';\r\nimport { getProfilePostsApi } from 'api/post.api';\r\n\r\n/**\r\n * Handles the post feed state. This hook will\r\n * make a async request for the user's 10 most recent\r\n * posts.\r\n * @param id - user's _id\r\n * @returns\r\n * - value: The list of user posts\r\n * - postCount: The total count of user posts. Determins if user can fetch more\r\n * - isLoading: Keeps track if the async request is in progress\r\n * - isPulling: Keeps track if the async request for more posts is in progress\r\n * - pullMorePosts: Method that pulls more posts\r\n */\r\nexport default function usePosts(id: string) {\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n  const [isPulling, setIsPulling] = useState<boolean>(false);\r\n  const [postCount, setPostCount] = useState<number>(0);\r\n  const [value, setValue] = useState<IHustlencodePost[]>([]);\r\n\r\n  // redux dispatcher\r\n  const dispatch = useAppDispatch();\r\n\r\n  // clears user session data and logs user out\r\n  const logoutHandler = () => dispatch(logout());\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n\r\n    /**\r\n     * Makes async request for user posts\r\n     * @param id - user's _id\r\n     */\r\n    async function loadDataAsync(id: string) {\r\n      try {\r\n        // request user post payload\r\n        const response = await getProfilePostsApi(id, 10);\r\n\r\n        if (mounted) {\r\n          // update state\r\n          setValue(response.posts);\r\n          setPostCount(response.postCount);\r\n          // hide loader\r\n          setIsLoading(false);\r\n        }\r\n      } catch (e) {\r\n        setIsLoading(false);\r\n        serverErrorHandler(e, logoutHandler);\r\n      }\r\n    }\r\n\r\n    if (mounted && id) loadDataAsync(id);\r\n\r\n    return () => {\r\n      mounted = false;\r\n    };\r\n  // TODO: Resolve 'react-hooks/exhaustive-deps\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [id]);\r\n\r\n  /**\r\n   * Makes request for more profile posts\r\n   * 10 more posts are requested\r\n   */\r\n  async function pullMorePosts() {\r\n    if(!isPulling){\r\n      try {\r\n        setIsPulling(true);\r\n        // request user post payload\r\n        const response = await getProfilePostsApi(id, value.length + 10);\r\n        // update state\r\n        setValue(response.posts);\r\n        setPostCount(response.postCount);\r\n        // hide loader\r\n        setIsPulling(false);\r\n      } catch (e) {\r\n        setIsPulling(false);\r\n        serverErrorHandler(e, logoutHandler);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes post from post feed\r\n   * @param id: Id of post to remove\r\n   */\r\n  function removePost(id: string) {\r\n    setValue([...value.filter(p => p._id !== id)]);\r\n    setPostCount(postCount - 1);\r\n  }\r\n\r\n  return {\r\n    value,\r\n    postCount,\r\n    isLoading,\r\n    isPulling,\r\n    pullMorePosts,\r\n    removePost,\r\n  };\r\n}\r\n","import CreatePostModule from 'components/CreatePostModule/CreatePostModule';\r\nimport IsAuthed from 'components/IsAuthed/IsAuthed';\r\nimport PageLoader from 'components/PageLoader/PageLoader';\r\nimport PostFeed from 'pages/profile_pages/ProfilePosts/PostFeed/PostFeed';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport { useOutletContext } from 'react-router-dom';\r\n\r\nconst ProfilePosts = () => {\r\n  // get user profile from router outlet context\r\n  const { username }: { username: string } = useOutletContext();\r\n  return (\r\n    <Container fluid>\r\n      <Row style={{ justifyContent: 'center' }}>\r\n        {username ? (\r\n          <Col md={9} lg={8}>\r\n            <IsAuthed type={'username'} value={username}>\r\n              <CreatePostModule />\r\n            </IsAuthed>\r\n            <PostFeed username={username} />\r\n          </Col>\r\n        ) : (\r\n          <PageLoader style={{ height: '100%', width: '100%' }} isVisible={true} fullscreen={false} theme={'light'} />\r\n        )}\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ProfilePosts;\r\n"],"names":["username","posts","id","useState","isLoading","setIsLoading","isPulling","setIsPulling","postCount","setPostCount","value","setValue","dispatch","useAppDispatch","logoutHandler","logout","getProfilePostsApi","length","response","serverErrorHandler","useEffect","mounted","loadDataAsync","pullMorePosts","removePost","filter","p","_id","usePosts","style","height","width","PageLoader","isVisible","fullscreen","theme","dataLength","next","hasMore","loader","className","classes","color","spin","icon","faSpinner","endMessage","textAlign","paddingTop","map","post","PostModule","postId","createdOn","postUser","user","html","css","js","useOutletContext","Container","fluid","Row","justifyContent","Col","md","lg","IsAuthed","type","CreatePostModule"],"sourceRoot":""}