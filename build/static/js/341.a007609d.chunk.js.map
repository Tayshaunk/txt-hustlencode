{"version":3,"file":"static/js/341.a007609d.chunk.js","mappings":"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","sources":["hooks/profile/useUpdateProfileAbout.ts","webpack://hustlencode.io/./src/pages/code_editor_pages/EditProfileAbout/EditProfileAbout.module.scss?15c2","pages/code_editor_pages/EditProfileAbout/EditProfileAbout.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { serverErrorHandler } from 'services/server-error.service';\r\nimport { useAppDispatch, useAppSelector } from 'store/hooks';\r\nimport { getUser, logout } from 'store/slices/userSessionSlice';\r\nimport { ICode } from 'interfaces/post.interface';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { IServerResponse } from 'interfaces/server.interface';\r\nimport { openSuccessToaster } from 'services/toast.service';\r\nimport { getProfileAboutApi, updateProfileAboutApi } from 'api/profile.api';\r\nimport { UpdateHustlencodeProfileAboutDto } from 'dtos/hustlencode-profile.dto';\r\n\r\nconst POST_INIT = {\r\n  html: '',\r\n  css: '',\r\n  js: '',\r\n  linesOfCode: 0,\r\n};\r\n\r\n/**\r\n * @returns\r\n */\r\nexport default function useUpdateProfileAbout() {\r\n  const location = useLocation();\r\n\r\n  // setup localstorage keys using the current location\r\n  const htmlChangesKey = location.pathname.replace('/', '') + 'html';\r\n  const cssChangesKey = location.pathname.replace('/', '') + 'css';\r\n  const jsChangesKey = location.pathname.replace('/', '') + 'js';\r\n\r\n  // tracks if request for post details has finished\r\n  const [isDoneLoading, setIsDoneLoading] = useState<boolean>(false);\r\n  // tracks if the post content is being updated\r\n  const [isSaving, setIsSaving] = useState<boolean>(false);\r\n  // content for post\r\n  const [value, setValue] = useState<ICode | null>(POST_INIT);\r\n  // determines if modal for unsaved changes is hidden or shown\r\n  const [showUnsavedChanges, setShowUnsavedChanges] = useState<boolean>(false);\r\n  // tracks if the editors contain updated code\r\n  const [hasChanges, setHasChanges] = useState<boolean>(false);\r\n\r\n  // redux dispatcher\r\n  const dispatch = useAppDispatch();\r\n\r\n  // clears user session data and logs user out\r\n  const logoutHandler = () => dispatch(logout());\r\n\r\n  // get user session data\r\n  const user = useAppSelector(getUser);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n\r\n    /**\r\n     * Make async request for\r\n     * for profile about code\r\n     * @param username\r\n     */\r\n    async function asyncLoadData(username: string) {\r\n      try {\r\n        // get code for about module\r\n        const data = await getProfileAboutApi(username);\r\n\r\n        // handle unsaved changes\r\n        if (localStorage[htmlChangesKey] || localStorage[cssChangesKey] || localStorage[jsChangesKey]) {\r\n          setShowUnsavedChanges(true);\r\n        }\r\n\r\n        // store the retrieved code\r\n        setValue(data);\r\n        // hide page loader\r\n        setIsDoneLoading(true);\r\n      } catch (e) {\r\n        setIsDoneLoading(true);\r\n        serverErrorHandler(e, logoutHandler);\r\n      }\r\n    }\r\n\r\n    if (mounted && user) asyncLoadData(user.username);\r\n\r\n    return () => {\r\n      mounted = false;\r\n    };\r\n    // TODO Resolve 'react-hooks/exhaustive-deps'\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [user]);\r\n\r\n  /**\r\n   * Makes request to make post\r\n   * @param payload The post data\r\n   */\r\n  const saveChanges = async (payload: UpdateHustlencodeProfileAboutDto) => {\r\n    try {\r\n      setIsSaving(true);\r\n\r\n      // make request to update post\r\n      const response: IServerResponse = await updateProfileAboutApi(user?._id || '', payload);\r\n\r\n      // show success message\r\n      openSuccessToaster(response.message, 3000);\r\n\r\n      // hide loader\r\n      setIsSaving(false);\r\n\r\n      // clear unsaved changes\r\n      clearStorage();\r\n      setHasChanges(false);\r\n    } catch (e) {\r\n      setIsSaving(false);\r\n      serverErrorHandler(e, logoutHandler);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Makes request create post and redirects user to\r\n   * profile page\r\n   * @param postId The post _id\r\n   * @param payload The post updates\r\n   */\r\n  const saveAndExit = async (payload: UpdateHustlencodeProfileAboutDto) => {\r\n    try {\r\n      setIsSaving(true);\r\n\r\n      // request user post payload\r\n      const response: IServerResponse = await updateProfileAboutApi(user?._id || '', payload);\r\n\r\n      // update state\r\n      openSuccessToaster(response.message, 3000);\r\n\r\n      // hide loader\r\n      setIsSaving(false);\r\n\r\n      // clear unsaved changes\r\n      clearStorage();\r\n    } catch (e) {\r\n      setIsSaving(false);\r\n      serverErrorHandler(e, logoutHandler);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Removes unsaved changes from local storage\r\n   */\r\n  const clearStorage = () => {\r\n\r\n    localStorage.removeItem(htmlChangesKey);\r\n    localStorage.removeItem(cssChangesKey);\r\n    localStorage.removeItem(jsChangesKey);\r\n  };\r\n\r\n  /**\r\n   * Hides modal for restoring unsaved changes\r\n   */\r\n  const closeModal = () => {\r\n    setShowUnsavedChanges(false);\r\n  };\r\n\r\n  /**\r\n   * Restores unsaved code\r\n   */\r\n  const applyUnsavedChanges = () => {\r\n\r\n    const updatedPost: ICode = {\r\n      html: '',\r\n      css: '',\r\n      js: '',\r\n      linesOfCode: 0,\r\n    };\r\n\r\n    // apply html changes\r\n    if (localStorage[htmlChangesKey] && localStorage[htmlChangesKey] !== '') {\r\n      updatedPost.html = localStorage[htmlChangesKey];\r\n    } else updatedPost.html = value?.html || '';\r\n\r\n    // apply css changes\r\n    if (localStorage[cssChangesKey]) {\r\n      updatedPost.css = localStorage[cssChangesKey];\r\n    } else updatedPost.css = value?.css || '';\r\n\r\n    // apply js changes\r\n    if (localStorage[jsChangesKey]) {\r\n      updatedPost.js = localStorage[jsChangesKey];\r\n    } else updatedPost.js = value?.js || '';\r\n\r\n    // update post value\r\n    setValue({ ...updatedPost });\r\n\r\n    // clear unsaved changes and hide modal\r\n    discardChanges();\r\n  };\r\n\r\n  /**\r\n   * Removes unsaved changes from local storage\r\n   */\r\n  const discardChanges = () => {\r\n    clearStorage();\r\n    closeModal();\r\n  };\r\n\r\n  return {\r\n    value,\r\n    showUnsavedChanges,\r\n    hasChanges,\r\n    isSaving,\r\n    isDoneLoading,\r\n    setHasChanges,\r\n    setIsSaving,\r\n    setValue,\r\n    saveChanges,\r\n    applyUnsavedChanges,\r\n    discardChanges,\r\n    closeModal,\r\n    saveAndExit,\r\n  };\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"EditProfileAbout_container__gUoi1\",\"draggerDarkH\":\"EditProfileAbout_draggerDarkH__XdgUz\",\"draggerDarkV\":\"EditProfileAbout_draggerDarkV__JzG+g\",\"gutterDarkH\":\"EditProfileAbout_gutterDarkH__Vtz-d\",\"gutterDarkV\":\"EditProfileAbout_gutterDarkV__Lf7cm\",\"draggerLightH\":\"EditProfileAbout_draggerLightH__HKgO2\",\"draggerLighV\":\"EditProfileAbout_draggerLighV__-WUou\",\"gutterLightH\":\"EditProfileAbout_gutterLightH__rKmkX\",\"gutterLightV\":\"EditProfileAbout_gutterLightV__FWGPd\",\"wrap\":\"EditProfileAbout_wrap__egk3G\",\"preview\":\"EditProfileAbout_preview__K8W8y\",\"header\":\"EditProfileAbout_header__X5lme\",\"btn\":\"EditProfileAbout_btn__ofQ65\",\"headerLeft\":\"EditProfileAbout_headerLeft__8PLGD\",\"headerRight\":\"EditProfileAbout_headerRight__BdTR6\",\"postContainer\":\"EditProfileAbout_postContainer__VQ9kI\",\"post\":\"EditProfileAbout_post__ffOPq\",\"unsavedChanges\":\"EditProfileAbout_unsavedChanges__oHcaV\",\"moduleContainer\":\"EditProfileAbout_moduleContainer__ErgyI\"};","import pageLayoutClasses from 'styles/modules/pageLayout.module.scss';\r\nimport usePostEditor from 'hooks/editor/usePostEditor';\r\nimport { UpdateHustlencodePostDto } from 'dtos/hustlencode-post.dto';\r\nimport useIsMobile from 'hooks/shared/useIsMobile';\r\nimport MobileTabs from '../../../components/MobileCodeEditor/MobileCodeEditor';\r\nimport SplitCodeEditor from '../../../components/SplitCodeEditor/SplitCodeEditor';\r\nimport { Button, Modal } from 'rsuite';\r\nimport Aux from 'components/_Aux/_Aux';\r\nimport PageLoader from 'components/PageLoader/PageLoader';\r\nimport NotFoundRender from 'components/NotFoundRender/NotFoundRender';\r\nimport { openErrorToaster } from 'services/toast.service';\r\nimport useUpdateProfileAbout from 'hooks/profile/useUpdateProfileAbout';\r\nimport ProfilePreviewModule from 'components/ProfilePreviewModule/ProfilePreviewModule';\r\nimport usePreviousPathNav from 'hooks/shared/usePreviousPathNav';\r\n\r\n// styles\r\nimport classes from './EditProfileAbout.module.scss';\r\n\r\nconst EditProfileAbout = () => {\r\n  // get state for updating post content\r\n  const postUpdates = useUpdateProfileAbout();\r\n\r\n  // gets the html editor state\r\n  const htmlEditor = usePostEditor(postUpdates.value?.html, postUpdates.setHasChanges, 'html');\r\n\r\n  // gets the css editor state\r\n  const cssEditor = usePostEditor(postUpdates.value?.css, postUpdates.setHasChanges, 'css');\r\n\r\n  // gets the js editor state\r\n  const jsEditor = usePostEditor(postUpdates.value?.js, postUpdates.setHasChanges, 'js');\r\n\r\n  // tracks is screen width is within mobile range\r\n  const isMobile = useIsMobile();\r\n\r\n  // gets hook for navigation to previous page\r\n  const previosPathNav = usePreviousPathNav();\r\n\r\n  /**\r\n   * Calls method to update the post preview\r\n   */\r\n  const updateHandler = () => {\r\n    // get total lines of code for each editor\r\n    const linesOfCode = htmlEditor.getLinesCount() + cssEditor.getLinesCount() + jsEditor.getLinesCount();\r\n\r\n    // update preview\r\n    postUpdates.setValue({ html: htmlEditor.value, css: cssEditor.value, js: jsEditor.value, linesOfCode });\r\n  };\r\n\r\n  /**\r\n   * Constructs the payload using the updated values\r\n   * and calls method to make server req\r\n   */\r\n  const saveHandler = async () => {\r\n    if (!areEditorsEmpty()) {\r\n      // get total lines of code for each editor\r\n      const linesOfCode = htmlEditor.getLinesCount() + cssEditor.getLinesCount() + jsEditor.getLinesCount();\r\n\r\n      // construct update payload\r\n      const payload: UpdateHustlencodePostDto = {\r\n        html: htmlEditor.value,\r\n        css: cssEditor.value,\r\n        js: jsEditor.value,\r\n        linesOfCode,\r\n      };\r\n\r\n      // save changes\r\n      await postUpdates.saveChanges(payload);\r\n    } else {\r\n      openErrorToaster('Please write some code code first.', 3000);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Navigates user to profile page\r\n   */\r\n  const exitEditorHandler = () => {\r\n    previosPathNav.goBack();\r\n  };\r\n\r\n  /**\r\n   * Saves changes and then navigates user to the profile\r\n   * page\r\n   */\r\n  const saveAndExitHandler = async () => {\r\n    if (!areEditorsEmpty()) {\r\n      // get total lines of code for each editor\r\n      const linesOfCode = htmlEditor.getLinesCount() + cssEditor.getLinesCount() + jsEditor.getLinesCount();\r\n\r\n      // construct update payload\r\n      const payload: UpdateHustlencodePostDto = {\r\n        html: htmlEditor.value,\r\n        css: cssEditor.value,\r\n        js: jsEditor.value,\r\n        linesOfCode,\r\n      };\r\n\r\n      // update post and return to profile\r\n      await postUpdates.saveAndExit(payload);\r\n\r\n      // go to previous page\r\n      previosPathNav.goBack();\r\n    } else {\r\n      openErrorToaster('Please write some code code first.', 3000);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Returns true if editors contain no code\r\n   * Otherwise returns false\r\n   * @returns\r\n   */\r\n  const areEditorsEmpty = (): boolean => {\r\n    if (htmlEditor.value.trim() === '' && cssEditor.value.trim() === '' && jsEditor.value.trim() === '') return true;\r\n\r\n    return false;\r\n  };\r\n\r\n  /**\r\n   * Checks if the device viewport is within the\r\n   * mobile device range or desktop and renders\r\n   * the appropriate view containing code editors and\r\n   * post preview\r\n   * @returns\r\n   */\r\n  const renderPostEditors = () => (\r\n    <Aux>\r\n      <NotFoundRender val={postUpdates.value}>\r\n        {isMobile.value ? (\r\n          <MobileTabs\r\n            htmlEditor={htmlEditor}\r\n            cssEditor={cssEditor}\r\n            jsEditor={jsEditor}\r\n            exitEditorHandler={exitEditorHandler}\r\n            saveAndExitHandler={saveAndExitHandler}\r\n            saveHandler={saveHandler}\r\n            isSaving={postUpdates.isSaving}\r\n            actionLabel=\"Save Changes\"\r\n            updateHandler={updateHandler}\r\n          >\r\n            {postUpdates.value ? (\r\n              <ProfilePreviewModule profileCode={postUpdates.value} key={'aboutWidget'} title={'About'} />\r\n            ) : (\r\n              <PageLoader\r\n                style={{ height: '100%', width: '100%' }}\r\n                isVisible={true}\r\n                fullscreen={false}\r\n                theme={'light'}\r\n              />\r\n            )}\r\n          </MobileTabs>\r\n        ) : (\r\n          <SplitCodeEditor\r\n            htmlEditor={htmlEditor}\r\n            cssEditor={cssEditor}\r\n            jsEditor={jsEditor}\r\n            exitEditorHandler={exitEditorHandler}\r\n            updateHandler={updateHandler}\r\n            saveAndExitHandler={saveAndExitHandler}\r\n            saveHandler={saveHandler}\r\n            isSaving={postUpdates.isSaving}\r\n            hasChanges={postUpdates.hasChanges}\r\n            actionLabel=\"Save Changes\"\r\n          >\r\n            {postUpdates.value ? (\r\n              <div className={classes.moduleContainer}>\r\n                <ProfilePreviewModule profileCode={postUpdates.value} key={'aboutWidget'} title={'About'} />\r\n              </div>\r\n            ) : (\r\n              <div />\r\n            )}\r\n          </SplitCodeEditor>\r\n        )}\r\n      </NotFoundRender>\r\n    </Aux>\r\n  );\r\n\r\n  return (\r\n    <div className={`${pageLayoutClasses.pageWrapper} ${classes.container}`} id=\"wrapper\">\r\n      <Modal\r\n        backdrop=\"static\"\r\n        role=\"alertdialog\"\r\n        open={postUpdates.showUnsavedChanges}\r\n        onClose={postUpdates.closeModal}\r\n        size=\"xs\"\r\n      >\r\n        <Modal.Body>\r\n          <p>Would you like to restore unsaved changes?</p>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button onClick={postUpdates.applyUnsavedChanges} appearance=\"primary\">\r\n            Restore Changes\r\n          </Button>\r\n          <Button onClick={postUpdates.discardChanges} appearance=\"subtle\">\r\n            Discard\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n      {postUpdates.isDoneLoading ? (\r\n        renderPostEditors()\r\n      ) : (\r\n        <PageLoader isVisible={true} fullscreen={false} theme={'dark'} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditProfileAbout;\r\n"],"names":["POST_INIT","html","css","js","linesOfCode","postUpdates","location","useLocation","htmlChangesKey","pathname","replace","cssChangesKey","jsChangesKey","useState","isDoneLoading","setIsDoneLoading","isSaving","setIsSaving","value","setValue","showUnsavedChanges","setShowUnsavedChanges","hasChanges","setHasChanges","dispatch","useAppDispatch","logoutHandler","logout","user","useAppSelector","getUser","useEffect","mounted","username","getProfileAboutApi","data","localStorage","serverErrorHandler","asyncLoadData","saveChanges","payload","updateProfileAboutApi","_id","response","openSuccessToaster","message","clearStorage","saveAndExit","removeItem","closeModal","discardChanges","applyUnsavedChanges","updatedPost","useUpdateProfileAbout","htmlEditor","usePostEditor","cssEditor","jsEditor","isMobile","useIsMobile","previosPathNav","usePreviousPathNav","updateHandler","getLinesCount","saveHandler","areEditorsEmpty","openErrorToaster","exitEditorHandler","goBack","saveAndExitHandler","trim","className","pageLayoutClasses","classes","id","Modal","backdrop","role","open","onClose","size","Button","onClick","appearance","NotFoundRender","val","actionLabel","ProfilePreviewModule","profileCode","title","PageLoader","style","height","width","isVisible","fullscreen","theme","SplitCodeEditor"],"sourceRoot":""}