{"version":3,"file":"static/js/16.85bd5e06.chunk.js","mappings":"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","sources":["api/profile.api.ts","hooks/profile/useProfileAbout.ts","webpack://hustlencode.io/./src/components/ProfileAboutModule/ProfileAboutModule.module.scss?5fad","components/ProfileAboutModule/ProfileAboutModule.tsx","hooks/profile/useProfileInterests.ts","webpack://hustlencode.io/./src/components/ProfileInterestsModule/ProfileInterestsModule.module.scss?dde0","components/ProfileInterestsModule/ProfileInterestsModule.tsx","pages/profile_pages/ProfileAbout/ProfileAbout.tsx"],"sourcesContent":["import { UpdateHustlencodeProfileAboutDto, UpdateHustlencodeProfileInterestsDto, UpdateHustlencodeProfileLayoutDto } from 'dtos/hustlencode-profile.dto';\r\nimport { ICode } from 'interfaces/post.interface';\r\nimport { IServerResponse } from 'interfaces/server.interface';\r\nimport axiosInstance from '../config/axios.config';\r\nimport { IHustlencodeUser } from '../interfaces/user.interface';\r\n\r\n// base API path for api requests\r\nconst BASE_URL = `/hustlencode/profile`;\r\n\r\n/**\r\n * Makes API request for users profile data\r\n * @param username The user's username\r\n * @returns\r\n * - User profile data\r\n */\r\nexport const getProfileApi = async (username: string): Promise<IHustlencodeUser> => {\r\n  const url = `${BASE_URL}/${username}`;\r\n\r\n  const response = await axiosInstance.get<any>(url);\r\n\r\n  // return user token\r\n  return response.data.payload;\r\n};\r\n\r\n/**\r\n * Returns Code for the profile about module\r\n * @param username the user's username\r\n * @returns\r\n * - Code for the about module\r\n */\r\nexport const getProfileAboutApi = async (username: string): Promise<ICode> => {\r\n  const url = `${BASE_URL}/${username}/about`;\r\n\r\n  const response = await axiosInstance.get<any>(url);\r\n\r\n  // return user token\r\n  return response.data.payload;\r\n};\r\n\r\n/**\r\n * Returns code for the profile interests module\r\n * @param username the user's username\r\n * @returns\r\n * - Code for the interests module\r\n */\r\nexport const getProfileInterestsApi = async (username: string): Promise<ICode> => {\r\n  const url = `${BASE_URL}/${username}/interests`;\r\n\r\n  const response = await axiosInstance.get<any>(url);\r\n\r\n  // return user token\r\n  return response.data.payload;\r\n};\r\n\r\n\r\n/**\r\n * Returns Code for the profile layout\r\n * @param username the user's username\r\n * @returns\r\n * - Code for layout\r\n */\r\n export const getProfileLayoutApi = async (username: string): Promise<ICode> => {\r\n  const url = `${BASE_URL}/${username}/layout`;\r\n\r\n  const response = await axiosInstance.get<any>(url);\r\n\r\n  // return user token\r\n  return response.data.payload;\r\n};\r\n\r\n/**\r\n * Updates and returns the code for the profile layout\r\n * @param username the user's username\r\n * @param payload The updated code for layout\r\n * @returns\r\n * - The update profile layout code\r\n */\r\n export const updateProfileLayoutApi = async (username: string, payload: UpdateHustlencodeProfileLayoutDto): Promise<IServerResponse> => {\r\n  const url = `${BASE_URL}/${username}/layout`;\r\n\r\n  const response = await axiosInstance.put<any>(url, payload);\r\n\r\n  // return user token\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * Updates and returns the code for the profile about module\r\n * @param username the user's username\r\n * @param payload The updated code for the module\r\n * @returns\r\n * - The update profile about module code\r\n */\r\nexport const updateProfileAboutApi = async (username: string, payload: UpdateHustlencodeProfileAboutDto): Promise<IServerResponse> => {\r\n  const url = `${BASE_URL}/${username}/about`;\r\n\r\n  const response = await axiosInstance.put<any>(url, payload);\r\n\r\n  // return user token\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * Updates and returns the code for the profile interests module\r\n * @param username the user's username\r\n * @param payload The updated code for the interests module\r\n * @returns\r\n * - The the updated interests module\r\n */\r\nexport const updateProfileInterestsApi = async (username: string, payload: UpdateHustlencodeProfileInterestsDto): Promise<IServerResponse> => {\r\n  const url = `${BASE_URL}/${username}/interests`;\r\n\r\n  const response = await axiosInstance.put<any>(url, payload);\r\n\r\n  // return user token\r\n  return response.data;\r\n};\r\n\r\n","import { useEffect, useState } from 'react';\r\nimport { getProfileAboutApi } from 'api/profile.api';\r\nimport { serverErrorHandler } from 'services/server-error.service';\r\nimport { useAppDispatch, useAppSelector } from 'store/hooks';\r\nimport { getUser, logout } from 'store/slices/userSessionSlice';\r\nimport { ICode } from 'interfaces/post.interface';\r\n\r\nconst POST_INIT = {\r\n  html: '',\r\n  css: '',\r\n  js: '',\r\n  linesOfCode: 0,\r\n};\r\n\r\nexport default function useProfileAbout(username?: string) {\r\n  // tracks if request for post details has finished\r\n  const [isDoneLoading, setIsDoneLoading] = useState<boolean>(false);\r\n  // content for post\r\n  const [value, setValue] = useState<ICode | null>(POST_INIT);\r\n\r\n  // redux dispatcher\r\n  const dispatch = useAppDispatch();\r\n\r\n  // clears user session data and logs user out\r\n  const logoutHandler = () => dispatch(logout());\r\n\r\n  // get user session data\r\n  const user = useAppSelector(getUser);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n\r\n    /**\r\n     * Make async request for\r\n     * for profile about code\r\n     * @param username\r\n     */\r\n    async function asyncLoadData(username: string) {\r\n      try {\r\n        // get code for about module\r\n        const data = await getProfileAboutApi(username);\r\n\r\n        if (mounted) {\r\n          // store the retrieved code\r\n          setValue(data);\r\n          // hide page loader\r\n          setIsDoneLoading(true);\r\n        }\r\n      } catch (e) {\r\n        setIsDoneLoading(true);\r\n        serverErrorHandler(e, logoutHandler);\r\n      }\r\n    }\r\n\r\n    if (mounted && user && username) asyncLoadData(username);\r\n\r\n    return () => {\r\n      mounted = false;\r\n    };\r\n    // TODO Resolve 'react-hooks/exhaustive-deps'\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [user, username]);\r\n\r\n  return {\r\n    value,\r\n    isDoneLoading,\r\n  };\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ProfileAboutModule_container__nAXR9\",\"header\":\"ProfileAboutModule_header__ogibl\",\"content\":\"ProfileAboutModule_content__bBgFj\",\"menu\":\"ProfileAboutModule_menu__RJdWK\"};","import ElipsisMenu from 'components/ElipsisMenu/ElipsisMenu';\r\nimport IsAuthed from 'components/IsAuthed/IsAuthed';\r\nimport PageLoader from 'components/PageLoader/PageLoader';\r\nimport useProfileAbout from 'hooks/profile/useProfileAbout';\r\nimport { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Dropdown } from 'rsuite';\r\nimport { useAppSelector } from 'store/hooks';\r\nimport { getUser } from 'store/slices/userSessionSlice';\r\n// styles\r\nimport pageclasses from 'styles/modules/pageLayout.module.scss';\r\nimport classes from './ProfileAboutModule.module.scss';\r\n\r\nconst ProfileAboutModule = ({ username }: { username: string }) => {\r\n  const [height, setHeight] = useState<number>();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  // get current user\r\n  const user = useAppSelector(getUser);\r\n\r\n  // get about module code\r\n  const profileAbout = useProfileAbout(username);\r\n\r\n  // sets up code for module\r\n  const code = `\r\n  <html id=\"html\">\r\n      <head>\r\n          <style>\r\n          ${profileAbout.value?.css}\r\n          </style>\r\n      </head>\r\n      <body>\r\n      ${profileAbout.value?.html}\r\n      </body>\r\n\r\n      <script>\r\n      ${profileAbout.value?.js}\r\n      </script>\r\n  \r\n  </html>\r\n  `;\r\n\r\n  /**\r\n   * Gets the real heigh of the iframe and stores it in state\r\n   * Once the value is stored, the height value is applied\r\n   * to the iframe\r\n   * @param e\r\n   */\r\n  const updateHeight = (e: any) => {\r\n    const h = e.target.contentWindow.document.getElementById('html').offsetHeight;\r\n    setHeight(h);\r\n  };\r\n\r\n  /**\r\n   * Navigates user to the editor post page\r\n   */\r\n  const goToEditor = () => {\r\n    if (user) {\r\n      navigate(`/edit/profile/about`);\r\n    }\r\n  };\r\n\r\n  const menu = [\r\n    <Dropdown.Item className={pageclasses.menuItem} key={1} onClick={goToEditor}>\r\n      Edit\r\n    </Dropdown.Item>,\r\n  ];\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <div className={classes.header}>\r\n        <p>About</p>\r\n\r\n        <IsAuthed type=\"username\" value={username}>\r\n          <ElipsisMenu width={40} height={40} className={classes.menu} placement=\"leftStart\" menuOptions={menu} isLoading={false} />\r\n        </IsAuthed>\r\n      </div>\r\n      <div className={classes.content}>\r\n        {profileAbout.isDoneLoading ? (\r\n          <iframe style={{ height: `${height}px`, width: '100%' }} title={username} srcDoc={code} onLoad={updateHeight} />\r\n        ) : (\r\n          <PageLoader isVisible={true} fullscreen={false} theme={'light'} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileAboutModule;\r\n","import { useEffect, useState } from 'react';\r\nimport { getProfileInterestsApi } from 'api/profile.api';\r\nimport { serverErrorHandler } from 'services/server-error.service';\r\nimport { useAppDispatch, useAppSelector } from 'store/hooks';\r\nimport { getUser, logout } from 'store/slices/userSessionSlice';\r\nimport { ICode } from 'interfaces/post.interface';\r\n\r\nconst POST_INIT = {\r\n  html: '',\r\n  css: '',\r\n  js: '',\r\n  linesOfCode: 0,\r\n};\r\n\r\nexport default function useProfileInterests(username?: string) {\r\n  // tracks if request for post details has finished\r\n  const [isDoneLoading, setIsDoneLoading] = useState<boolean>(false);\r\n  // content for post\r\n  const [value, setValue] = useState<ICode | null>(POST_INIT);\r\n\r\n  // redux dispatcher\r\n  const dispatch = useAppDispatch();\r\n\r\n  // clears user session data and logs user out\r\n  const logoutHandler = () => dispatch(logout());\r\n\r\n  // get user session data\r\n  const user = useAppSelector(getUser);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n\r\n    /**\r\n     * Make async request for\r\n     * for profile about code\r\n     * @param username\r\n     */\r\n    async function asyncLoadData(username: string) {\r\n      try {\r\n        // get code for about module\r\n        const data = await getProfileInterestsApi(username);\r\n\r\n        if (mounted) {\r\n          // store the retrieved code\r\n          setValue(data);\r\n          // hide page loader\r\n          setIsDoneLoading(true);\r\n        }\r\n      } catch (e) {\r\n        setIsDoneLoading(true);\r\n        serverErrorHandler(e, logoutHandler);\r\n      }\r\n    }\r\n\r\n    if (mounted && user && username) asyncLoadData(username);\r\n\r\n    return () => {\r\n      mounted = false;\r\n    };\r\n    // TODO Resolve 'react-hooks/exhaustive-deps'\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [user, username]);\r\n\r\n  return {\r\n    value,\r\n    isDoneLoading,\r\n  };\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ProfileInterestsModule_container__CfL9F\",\"header\":\"ProfileInterestsModule_header__7njl5\",\"content\":\"ProfileInterestsModule_content__Wndw0\",\"menu\":\"ProfileInterestsModule_menu__5I5wL\"};","import ElipsisMenu from 'components/ElipsisMenu/ElipsisMenu';\r\nimport IsAuthed from 'components/IsAuthed/IsAuthed';\r\nimport PageLoader from 'components/PageLoader/PageLoader';\r\nimport useProfileInterests from 'hooks/profile/useProfileInterests';\r\nimport { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Dropdown } from 'rsuite';\r\nimport { useAppSelector } from 'store/hooks';\r\nimport { getUser } from 'store/slices/userSessionSlice';\r\n// styles\r\nimport pageclasses from 'styles/modules/pageLayout.module.scss';\r\nimport classes from './ProfileInterestsModule.module.scss';\r\n\r\nconst ProfileInterestsModule = ({ username }: { username: string }) => {\r\n  const [height, setHeight] = useState<number>();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  // get current user\r\n  const user = useAppSelector(getUser);\r\n\r\n  const profileInterests = useProfileInterests(username);\r\n\r\n  // sets up code for module\r\n  const code = `\r\n  <html id=\"html\">\r\n      <head>\r\n          <style>\r\n          ${profileInterests.value?.css}\r\n          </style>\r\n      </head>\r\n      <body>\r\n      ${profileInterests.value?.html}\r\n      </body>\r\n\r\n      <script>\r\n      ${profileInterests.value?.js}\r\n      </script>\r\n  \r\n  </html>\r\n  `;\r\n\r\n  /**\r\n   * Gets the real heigh of the iframe and stores it in state\r\n   * Once the value is stored, the height value is applied\r\n   * to the iframe\r\n   * @param e\r\n   */\r\n  const updateHeight = (e: any) => {\r\n    const h = e.target.contentWindow.document.getElementById('html').offsetHeight;\r\n    setHeight(h);\r\n  };\r\n\r\n  /**\r\n   * Navigates user to the editor post page\r\n   */\r\n  const goToEditor = () => {\r\n    if (user) {\r\n      navigate(`/edit/profile/interests`);\r\n    }\r\n  };\r\n\r\n  const menu = [\r\n    <Dropdown.Item className={pageclasses.menuItem} key={1} onClick={goToEditor}>\r\n      Edit\r\n    </Dropdown.Item>,\r\n  ];\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <div className={classes.header}>\r\n        <p>Interests</p>\r\n\r\n        <IsAuthed type=\"username\" value={username}>\r\n          <ElipsisMenu width={40} height={40} className={classes.menu} placement=\"leftStart\" menuOptions={menu} isLoading={false} />\r\n        </IsAuthed>\r\n      </div>\r\n      <div className={classes.content}>\r\n        {profileInterests.isDoneLoading ? (\r\n          <iframe style={{ height: `${height}px`, width: '100%' }} title={username} srcDoc={code} onLoad={updateHeight} />\r\n        ) : (\r\n          <PageLoader isVisible={true} fullscreen={false} theme={'light'} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileInterestsModule;\r\n","import PageLoader from 'components/PageLoader/PageLoader';\r\nimport ProfileAboutModule from 'components/ProfileAboutModule/ProfileAboutModule';\r\nimport ProfileInterestsModule from 'components/ProfileInterestsModule/ProfileInterestsModule';\r\n\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport { useOutletContext } from 'react-router-dom';\r\n\r\nconst ProfileAbout = () => {\r\n  // get user profile from router outlet context\r\n  const { username }: { username: string } = useOutletContext();\r\n\r\n  return (\r\n    <Container fluid>\r\n      {username ? (\r\n        <Row style={{ justifyContent: 'center' }}>\r\n          <Col md={9} lg={6}>\r\n            <ProfileAboutModule username={username} />\r\n          </Col>\r\n          <Col md={9} lg={6}>\r\n            <ProfileInterestsModule username={username} />\r\n          </Col>\r\n        </Row>\r\n      ) : (\r\n        <PageLoader style={{ height: '100%', width: '100%' }} isVisible={true} fullscreen={false} theme={'light'} />\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ProfileAbout;\r\n"],"names":["BASE_URL","getProfileApi","username","url","axiosInstance","response","data","payload","getProfileAboutApi","getProfileInterestsApi","getProfileLayoutApi","updateProfileLayoutApi","updateProfileAboutApi","updateProfileInterestsApi","POST_INIT","html","css","js","linesOfCode","useState","height","setHeight","navigate","useNavigate","user","useAppSelector","getUser","profileAbout","isDoneLoading","setIsDoneLoading","value","setValue","dispatch","useAppDispatch","logoutHandler","logout","useEffect","mounted","serverErrorHandler","asyncLoadData","useProfileAbout","code","menu","Dropdown","className","pageclasses","onClick","classes","IsAuthed","type","ElipsisMenu","width","placement","menuOptions","isLoading","style","title","srcDoc","onLoad","e","h","target","contentWindow","document","getElementById","offsetHeight","PageLoader","isVisible","fullscreen","theme","profileInterests","useProfileInterests","useOutletContext","Container","fluid","Row","justifyContent","Col","md","lg"],"sourceRoot":""}