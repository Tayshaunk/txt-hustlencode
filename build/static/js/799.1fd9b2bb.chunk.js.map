{"version":3,"file":"static/js/799.1fd9b2bb.chunk.js","mappings":"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","sources":["api/account.api.ts","webpack://hustlencode.io/./src/pages/edit_profile_pages/EditProfilePassword/EditProfilePassword.module.scss?c01d","hooks/profile/useEditProfilePasswordForm.ts","pages/edit_profile_pages/EditProfilePassword/EditProfilePassword.tsx"],"sourcesContent":["import { AxiosRequestConfig, AxiosResponse } from 'axios';\r\nimport { UpdateHustlencodeProfileGeneralDto, UpdateHustlencodeProfilePasswordDto } from 'dtos/hustlencode-account.dto';\r\nimport { UpdateHustlencodeProfileGeneral } from 'dtos/hustlencode-profile.dto';\r\nimport { IServerResponse } from 'interfaces/server.interface';\r\nimport axiosInstance from '../config/axios.config';\r\n\r\n// base API path for api requests\r\nconst BASE_URL = `/hustlencode/account`;\r\n\r\n/**\r\n * Makes api request to update the user's username\r\n * and email\r\n * @param payload\r\n * @returns\r\n */\r\nexport const updateProfileUsernameApi = async (payload: UpdateHustlencodeProfileGeneral): Promise<IServerResponse> => {\r\n  const url = `${BASE_URL}`;\r\n\r\n  const response = await axiosInstance.put<any>(url, payload);\r\n\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * Makes API request to check if a username is avaialble\r\n * @param username\r\n * @returns\r\n */\r\nexport const checkUsernameAvailApi = async (username: string): Promise<IServerResponse> => {\r\n  const url = `${BASE_URL}/username/${username}`;\r\n\r\n  const response = await axiosInstance.get<any>(url);\r\n\r\n  // return payload\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * Makes API request to update user's password\r\n * @param payload\r\n * @returns\r\n */\r\nexport const updateProfilePasswordApi = async (\r\n  payload: UpdateHustlencodeProfilePasswordDto,\r\n): Promise<IServerResponse> => {\r\n  const url = `${BASE_URL}/password`;\r\n\r\n  const response = await axiosInstance.put<any>(url, payload);\r\n\r\n  // return payload\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * Makes API request to update user:\r\n * - firstName\r\n * - lastName\r\n * @param payload\r\n * @returns\r\n */\r\nexport const updateProfileGeneralApi = async (\r\n  payload: UpdateHustlencodeProfileGeneralDto,\r\n): Promise<IServerResponse> => {\r\n  const url = `${BASE_URL}/profile`;\r\n\r\n  const response = await axiosInstance.put<any>(url, payload);\r\n\r\n  // return payload\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * Makes api request to upload and update the users\r\n * profile image\r\n * @param payload\r\n * @param id\r\n * @returns\r\n */\r\nexport const updateUserProfileImageApi = async (payload: any) => {\r\n  const url = `${BASE_URL}/profile-image`;\r\n\r\n  // headers for server query\r\n  const config: AxiosRequestConfig = {\r\n    headers: {\r\n      'content-type': 'multipart/form-data',\r\n    },\r\n  };\r\n\r\n  // make server request\r\n  const response: AxiosResponse<IServerResponse> = await axiosInstance.put(url, payload, config);\r\n\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * Makes api request to upload and update the users\r\n * profile cover image\r\n * @param payload\r\n * @param id\r\n * @returns\r\n */\r\nexport const updateUserProfileCoverImageApi = async (payload: any) => {\r\n  const url = `${BASE_URL}/profile-cover-image`;\r\n\r\n  // headers for server query\r\n  const config: AxiosRequestConfig = {\r\n    headers: {\r\n      'content-type': 'multipart/form-data',\r\n    },\r\n  };\r\n\r\n  // make server request\r\n  const response: AxiosResponse<IServerResponse> = await axiosInstance.put(url, payload, config);\r\n\r\n  return response.data;\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"FormBtnToolbar\":\"EditProfilePassword_FormBtnToolbar__FSF8p\",\"saveBtn\":\"EditProfilePassword_saveBtn__IUlkg\",\"validUsername\":\"EditProfilePassword_validUsername__+wctW\",\"invalidUsername\":\"EditProfilePassword_invalidUsername__mpv44\",\"usernameSpinner\":\"EditProfilePassword_usernameSpinner__TLxA8\"};","import { useState } from 'react';\r\nimport { Schema } from 'rsuite';\r\nimport { useAppDispatch } from 'store/hooks';\r\nimport { logout } from 'store/slices/userSessionSlice';\r\nimport { serverErrorHandler } from 'services/server-error.service';\r\nimport { getFormValidationStatus } from 'util/form.util';\r\nimport { IServerResponse } from 'interfaces/server.interface';\r\nimport { openSuccessToaster } from 'services/toast.service';\r\nimport { UpdateHustlencodeProfilePasswordDto } from 'dtos/hustlencode-account.dto';\r\nimport { updateProfilePasswordApi } from 'api/account.api';\r\n// Extract schema types for form validation\r\nconst { StringType } = Schema.Types;\r\n\r\nconst INIT_FORM = { password: '', currentPassword: '' };\r\n\r\n/**\r\n * Define validation model for updating profile:\r\n * - password\r\n */\r\nconst model = Schema.Model({\r\n  currentPassword: StringType().isRequired('Please enter your current password.'),\r\n  password: StringType()\r\n    .isRequired('Please enter a valid password.')\r\n    .minLength(4, 'Password must be 4 characters long.'),\r\n});\r\n\r\nexport default function useEditProfilePasswordForm() {\r\n  const [value, setValue] = useState<UpdateHustlencodeProfilePasswordDto>(INIT_FORM); // set default form values\r\n  const [isLoading, setIsLoading] = useState(false); // flag for submission process\r\n\r\n  // get redux store dispatch\r\n  const dispatch = useAppDispatch();\r\n\r\n  const logoutHandler = () => dispatch(logout());\r\n\r\n  /**\r\n   * Makes async request to update the user's password\r\n   */\r\n  const submit = async () => {\r\n    try {\r\n      // verify that form is valid\r\n      if (getFormValidationStatus(model.check(value))) {\r\n        // show spinner\r\n        setIsLoading(true);\r\n\r\n        // make api req\r\n        const response: IServerResponse = await updateProfilePasswordApi(value);\r\n\r\n        // show success message\r\n        openSuccessToaster(response.message, 3500);\r\n\r\n        // hide spinner\r\n        setIsLoading(false);\r\n\r\n        // clear form\r\n        setValue(INIT_FORM);\r\n      }\r\n    } catch (e) {\r\n      // hide spinner\r\n      setIsLoading(false);\r\n      serverErrorHandler(e, logoutHandler);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Update the form state when the form field values change\r\n   * The username field is checked to ensure that the provided username is\r\n   * avaiable\r\n   * @param val\r\n   */\r\n  const onChange = (val: UpdateHustlencodeProfilePasswordDto) => {\r\n    // check email\r\n    setValue(val);\r\n  };\r\n\r\n  return { model, value, isLoading, submit, onChange };\r\n}\r\n","import { Form, ButtonToolbar } from 'rsuite';\r\nimport TextFormField from 'components/FormFields/single/TextFormField';\r\nimport ButtonSpinner from 'components/Buttons/ButtonSpinner/ButtonSpinner';\r\n\r\n// styles\r\nimport classes from './EditProfilePassword.module.scss';\r\nimport useEditProfilePasswordForm from 'hooks/profile/useEditProfilePasswordForm';\r\n\r\n\r\n/**\r\n * Render form where user can update their password\r\n * @returns\r\n */\r\nconst EditProfilePassword = () => {\r\n  // get form\r\n  const form = useEditProfilePasswordForm();\r\n\r\n  return (\r\n    <div className={classes.ContentWrapper}>\r\n      <Form\r\n        formValue={form.value}\r\n        fluid={true}\r\n        className={classes.CustomForm}\r\n        model={form.model}\r\n        onChange={(val: any) => form.onChange(val)}\r\n      >\r\n        <TextFormField type=\"password\" name=\"currentPassword\" label={'Current password'} />\r\n\r\n        <TextFormField type=\"password\" name=\"password\" label={'New Password'} />\r\n\r\n        <ButtonToolbar className={classes.FormBtnToolbar}>\r\n          <ButtonSpinner\r\n            type=\"submit\"\r\n            appearance=\"primary\"\r\n            label={'Save Changes'}\r\n            isLoading={form.isLoading}\r\n            disabled={form.isLoading}\r\n            onClick={form.submit}\r\n            size=\"md\"\r\n            className={classes.saveBtn}\r\n          />\r\n        </ButtonToolbar>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditProfilePassword;\r\n"],"names":["BASE_URL","updateProfileUsernameApi","payload","url","axiosInstance","response","data","checkUsernameAvailApi","username","updateProfilePasswordApi","updateProfileGeneralApi","updateUserProfileImageApi","config","headers","updateUserProfileCoverImageApi","StringType","Schema","INIT_FORM","password","currentPassword","model","isRequired","minLength","form","useState","value","setValue","isLoading","setIsLoading","dispatch","useAppDispatch","logoutHandler","logout","submit","getFormValidationStatus","check","openSuccessToaster","message","serverErrorHandler","onChange","val","useEditProfilePasswordForm","className","classes","Form","formValue","fluid","TextFormField","type","name","label","ButtonToolbar","ButtonSpinner","appearance","disabled","onClick","size"],"sourceRoot":""}