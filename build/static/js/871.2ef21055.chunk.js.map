{"version":3,"file":"static/js/871.2ef21055.chunk.js","mappings":"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","sources":["webpack://hustlencode.io/./src/components/CodeEditor/CodeEditor.module.scss?8f1b","components/CodeEditor/CodeEditor.tsx","webpack://hustlencode.io/./src/components/MobileCodeEditor/MobileCodeEditor.module.scss?3e17","components/MobileCodeEditor/MobileCodeEditor.tsx","webpack://hustlencode.io/./src/components/PostPreviewModule/PostPreviewModule.module.scss?86c0","components/PostPreviewModule/PostPreviewModule.tsx","webpack://hustlencode.io/./src/components/SplitCodeEditor/SplitCodeEditor.module.scss?5d44","components/SplitCodeEditor/SplitCodeEditor.tsx","hooks/editor/usePostEditor.ts","hooks/shared/usePreviousPathNav.ts","hooks/posts/useCreatePost.ts","webpack://hustlencode.io/./src/pages/code_editor_pages/CreatePost/CreatePost.module.scss?6ce9","pages/code_editor_pages/CreatePost/CreatePost.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"CodeEditor_container__zNWs5\",\"header\":\"CodeEditor_header__Txhjd\",\"title\":\"CodeEditor_title__ii0lV\",\"editorContainer\":\"CodeEditor_editorContainer__5RqoY\",\"format\":\"CodeEditor_format__VBPP2\"};","import Editor, { OnMount, OnChange } from '@monaco-editor/react';\r\n\r\n// styles\r\nimport classes from './CodeEditor.module.scss';\r\n\r\ninterface IProps {\r\n  editor: {\r\n    value: string;\r\n    theme: string;\r\n    handleEditorDidMount: OnMount;\r\n    handleEditorChange: OnChange;\r\n  };\r\n  height: number;\r\n  title?: string;\r\n  defaultLanguage: string;\r\n  defaultValue: string;\r\n}\r\n\r\n/**\r\n *\r\n * @param props\r\n * @returns\r\n */\r\nconst CodeEditor = (props: IProps) => {\r\n  const {  title, editor, defaultValue, defaultLanguage, height } = props;\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      {title ? (\r\n        <div className={classes.header}>\r\n          <div>\r\n            <p className={classes.title}>{title}</p>\r\n          </div>\r\n          <div />\r\n        </div>\r\n      ) : null}\r\n      <div className={classes.editorContainer} style={{ height, width: '100%', backgroundColor: '#1E1E1E' }}>\r\n        <Editor\r\n          onMount={editor.handleEditorDidMount}\r\n          value={editor.value}\r\n          defaultLanguage={defaultLanguage}\r\n          defaultValue={defaultValue}\r\n          onChange={editor.handleEditorChange}\r\n          theme={editor.theme}\r\n          options={{\r\n            scrollBeyondLastLine: true,\r\n            minimap: { enabled: false },\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CodeEditor;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"tabToolBarWrapper\":\"MobileCodeEditor_tabToolBarWrapper__oleKr\",\"title\":\"MobileCodeEditor_title__hTRkU\",\"tabButtonToolBar\":\"MobileCodeEditor_tabButtonToolBar__yQPcD\",\"tab\":\"MobileCodeEditor_tab__FLiOI\",\"tabBtn\":\"MobileCodeEditor_tabBtn__JCjXr\",\"active\":\"MobileCodeEditor_active__Sizq2\",\"header\":\"MobileCodeEditor_header__VaSja\",\"btn\":\"MobileCodeEditor_btn__dPqlr\",\"headerLeft\":\"MobileCodeEditor_headerLeft__KoB-j\",\"headerRight\":\"MobileCodeEditor_headerRight__4BBi-\",\"editorContainer\":\"MobileCodeEditor_editorContainer__xqGtU\",\"postContainer\":\"MobileCodeEditor_postContainer__emlDG\",\"post\":\"MobileCodeEditor_post__W1A2e\"};","import ButtonSpinner from 'components/Buttons/ButtonSpinner/ButtonSpinner';\r\nimport { IUseCodeEditor } from 'interfaces/code.interface';\r\nimport { useEffect, useState } from 'react';\r\nimport { Button } from 'rsuite';\r\nimport CodeEditor from '../CodeEditor/CodeEditor';\r\nimport classes from './MobileCodeEditor.module.scss';\r\n\r\ninterface IProps {\r\n  htmlEditor?: IUseCodeEditor;\r\n  cssEditor?: IUseCodeEditor;\r\n  jsEditor?: IUseCodeEditor;\r\n  isSaving: boolean;\r\n  children: any;\r\n  actionLabel: string;\r\n  exitEditorHandler: () => void;\r\n  saveAndExitHandler?: () => void;\r\n  saveHandler: () => void;\r\n  updateHandler: () => void;\r\n}\r\n\r\nconst MobileCodeEditor = (props: IProps) => {\r\n  const {\r\n    isSaving,\r\n    htmlEditor,\r\n    cssEditor,\r\n    jsEditor,\r\n    actionLabel,\r\n    children,\r\n    exitEditorHandler,\r\n    saveAndExitHandler,\r\n    saveHandler,\r\n    updateHandler,\r\n  } = props;\r\n\r\n  // current active tab\r\n  const [tabs, setTabs] = useState<any[]>([]);\r\n  // current active tab\r\n  const [activeTab, setActiveTab] = useState<number>(tabs.length - 1);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n\r\n    function getTabs() {\r\n      const t = [];\r\n      if (htmlEditor) t.push({ label: 'HTML' });\r\n      if (cssEditor) t.push({ label: 'CSS' });\r\n      if (jsEditor) t.push({ label: 'JS' });\r\n      t.push({ label: 'Preview' });\r\n\r\n      setTabs(t);\r\n      setActiveTab(t.length - 1);\r\n    }\r\n\r\n    if (mounted) getTabs();\r\n\r\n    return () => {\r\n      mounted = false;\r\n    };\r\n  }, [htmlEditor, cssEditor, jsEditor]);\r\n\r\n  const getTabIndex = (label: string) => {\r\n    return tabs.map(t => t.label).indexOf(label);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.tabToolBarWrapper}>\r\n      <div className={classes.tabButtonToolBar}>\r\n        {tabs.map((t, i) => (\r\n          <div key={t.label} className={`${classes.tab} ${i === activeTab ? classes.active : ''}`}>\r\n            <Button\r\n              className={classes.tabBtn}\r\n              onClick={() => {\r\n                setActiveTab(i);\r\n                if (tabs.length - 1 === 3) updateHandler();\r\n              }}\r\n            >\r\n              <p>{t.label}</p>\r\n            </Button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {htmlEditor ? (\r\n        <div\r\n          style={{ display: activeTab === getTabIndex('HTML') ? 'block' : 'none' }}\r\n          className={classes.editorContainer}\r\n        >\r\n          <CodeEditor editor={htmlEditor} height={100} defaultLanguage=\"html\" defaultValue=\"\" />\r\n        </div>\r\n      ) : null}\r\n\r\n      {cssEditor ? (\r\n        <div style={{ display: activeTab === getTabIndex('CSS') ? 'block' : 'none' }} className={classes.editorContainer}>\r\n          <CodeEditor editor={cssEditor} height={100} defaultLanguage=\"css\" defaultValue=\"\" />\r\n        </div>\r\n      ) : null}\r\n\r\n      {jsEditor ? (\r\n        <div style={{ display: activeTab === getTabIndex('JS') ? 'block' : 'none' }} className={classes.editorContainer}>\r\n          <CodeEditor editor={jsEditor} height={100} defaultLanguage=\"javascript\" defaultValue=\"\" />\r\n        </div>\r\n      ) : null}\r\n\r\n      <div style={{ display: activeTab === getTabIndex('Preview') ? 'flex' : 'none' }} className={classes.postContainer}>\r\n        <div className={classes.header}>\r\n          <div className={classes.headerLeft}>\r\n            <ButtonSpinner\r\n              className={classes.btn}\r\n              size=\"xs\"\r\n              color=\"red\"\r\n              type={'button'}\r\n              appearance={'primary'}\r\n              label={'Exit Editor'}\r\n              isLoading={false}\r\n              disabled={isSaving}\r\n              onClick={exitEditorHandler}\r\n            />\r\n\r\n            {saveAndExitHandler ? (\r\n              <ButtonSpinner\r\n                className={classes.btn}\r\n                size=\"xs\"\r\n                color=\"green\"\r\n                type={'button'}\r\n                appearance={'primary'}\r\n                label={'Save And Exit'}\r\n                isLoading={isSaving}\r\n                disabled={isSaving}\r\n                onClick={saveAndExitHandler}\r\n              />\r\n            ) : (\r\n              <div />\r\n            )}\r\n          </div>\r\n\r\n          <div className={classes.headerRight}>\r\n            <ButtonSpinner\r\n              className={classes.btn}\r\n              size=\"xs\"\r\n              color=\"green\"\r\n              type={'button'}\r\n              appearance={'primary'}\r\n              label={actionLabel}\r\n              isLoading={isSaving}\r\n              disabled={isSaving}\r\n              onClick={saveHandler}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className={classes.post}>{children}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MobileCodeEditor;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"PostPreviewModule_container__uA2lJ\",\"header\":\"PostPreviewModule_header__IY7PJ\",\"imgContainer\":\"PostPreviewModule_imgContainer__WXzow\",\"nameContainer\":\"PostPreviewModule_nameContainer__vBaWZ\",\"name\":\"PostPreviewModule_name__qhwqm\",\"menuContainer\":\"PostPreviewModule_menuContainer__Gml0L\",\"content\":\"PostPreviewModule_content__lh4O3\"};","import FromNowDate from 'components/FromNowDate/FromNowDate';\r\nimport { ICode } from 'interfaces/post.interface';\r\nimport { IHustlencodeUser } from 'interfaces/user.interface';\r\nimport { useState } from 'react';\r\nimport { getProfileImage } from 'util/profile.util';\r\n// import styles\r\nimport classes from './PostPreviewModule.module.scss';\r\n\r\ninterface IProps {\r\n  createdOn: Date;\r\n  postCode: ICode;\r\n  postUser: IHustlencodeUser | null | undefined;\r\n}\r\n\r\nconst PostPreviewModule = (props: IProps) => {\r\n  const { postUser, createdOn, postCode } = props;\r\n\r\n  // height of the iframe that will render the code\r\n  const [height, setHeight] = useState<number>();\r\n\r\n  // sets up code for module\r\n  const code = `\r\n  <html id=\"html\">\r\n      <head>\r\n          <style>\r\n          ${postCode.css}\r\n          </style>\r\n      </head>\r\n      <body>\r\n          ${postCode.html}\r\n      </body>\r\n\r\n      <script>\r\n          ${postCode.js}\r\n      </script>\r\n  \r\n  </html>\r\n  `;\r\n\r\n  /**\r\n   * Gets the real heigh of the iframe and stores it in state\r\n   * Once the value is stored, the height value is applied\r\n   * to the iframe\r\n   * @param e\r\n   */\r\n  const updateHeight = (e: any) => {\r\n    const h = e.target.contentWindow.document.getElementById('html').offsetHeight;\r\n    setHeight(h);\r\n  };\r\n\r\n  const renderHeader = () => (\r\n    <div className={classes.header}>\r\n      <div className={classes.imgContainer}>\r\n        {postUser ? (\r\n          <img src={getProfileImage(postUser.profileImg, postUser.gender)} alt={`${postUser.name} profile thumbnail`} />\r\n        ) : (\r\n          <img src=\"https://hustlencode.s3.us-west-1.amazonaws.com/unspecified.jpg\" alt=\"profile thumbnail\" />\r\n        )}\r\n      </div>\r\n      <div className={classes.nameContainer}>\r\n        <div className={classes.name}>\r\n          <p>{postUser?.name}</p>\r\n        </div>\r\n        <div>{createdOn ? <FromNowDate date={createdOn} /> : <FromNowDate date={new Date()} />}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n  return (\r\n    <div className={classes.container}>\r\n      {renderHeader()}\r\n      <div className={classes.content}>\r\n        <iframe style={{ height: `${height}px`, width: '100%' }} title={`${new Date().getTime()}-post`} srcDoc={code} onLoad={updateHeight} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostPreviewModule;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"draggerDarkH\":\"SplitCodeEditor_draggerDarkH__iTbJy\",\"draggerDarkV\":\"SplitCodeEditor_draggerDarkV__TkYiJ\",\"gutterDarkH\":\"SplitCodeEditor_gutterDarkH__Ub06v\",\"gutterDarkV\":\"SplitCodeEditor_gutterDarkV__JA0OW\",\"draggerLightH\":\"SplitCodeEditor_draggerLightH__HYVre\",\"draggerLighV\":\"SplitCodeEditor_draggerLighV__Dys82\",\"gutterLightH\":\"SplitCodeEditor_gutterLightH__G+gnw\",\"gutterLightV\":\"SplitCodeEditor_gutterLightV__1klAi\",\"wrap\":\"SplitCodeEditor_wrap__+VLlI\",\"preview\":\"SplitCodeEditor_preview__gJbyM\",\"header\":\"SplitCodeEditor_header__dFkJm\",\"btn\":\"SplitCodeEditor_btn__N1LPe\",\"headerLeft\":\"SplitCodeEditor_headerLeft__xUZz-\",\"headerRight\":\"SplitCodeEditor_headerRight__MnIh4\",\"postContainer\":\"SplitCodeEditor_postContainer__8Ihko\",\"post\":\"SplitCodeEditor_post__0pvBR\"};","import ReactSplit, { SplitDirection } from '@devbookhq/splitter';\r\nimport ButtonSpinner from 'components/Buttons/ButtonSpinner/ButtonSpinner';\r\nimport CodeEditor from '../CodeEditor/CodeEditor';\r\nimport { useState } from 'react';\r\nimport { IUseCodeEditor } from 'interfaces/code.interface';\r\n\r\n// styles\r\nimport classes from './SplitCodeEditor.module.scss';\r\n\r\ninterface IProps {\r\n  htmlEditor?: IUseCodeEditor;\r\n  cssEditor?: IUseCodeEditor;\r\n  jsEditor?: IUseCodeEditor;\r\n  isSaving: boolean;\r\n  hasChanges: boolean;\r\n  actionLabel: string;\r\n  children: any;\r\n  exitEditorHandler: () => void;\r\n  saveAndExitHandler?: () => void;\r\n  updateHandler: () => void;\r\n  saveHandler: () => void;\r\n}\r\n\r\nconst SplitCodeEditor = (props: IProps) => {\r\n  const {\r\n    isSaving,\r\n    hasChanges,\r\n    children,\r\n    htmlEditor,\r\n    cssEditor,\r\n    jsEditor,\r\n    actionLabel,\r\n    exitEditorHandler,\r\n    saveAndExitHandler,\r\n    updateHandler,\r\n    saveHandler,\r\n  } = props;\r\n\r\n  // size of row witth the editors (i=0), and the row with the preview (i=1)\r\n  // sizes are percentages - 50.55 b-> .5055\r\n  const [sizes, setSizes] = useState([(1 / 2) * 100, (1 / 2) * 100]);\r\n\r\n  // Updates the size of the\r\n  function handleResize(gutterIdx: number, allSizes: number[]) {\r\n    setSizes(allSizes);\r\n  }\r\n\r\n  return (\r\n    <ReactSplit\r\n      gutterClassName={classes.gutterDarkV}\r\n      draggerClassName={classes.draggerDarkV}\r\n      direction={SplitDirection.Vertical}\r\n      onResizeFinished={handleResize}\r\n      initialSizes={sizes}\r\n    >\r\n      <ReactSplit\r\n        direction={SplitDirection.Horizontal}\r\n        gutterClassName={classes.gutterDarkH}\r\n        draggerClassName={classes.draggerDarkH}\r\n      >\r\n        {htmlEditor ? (\r\n          <CodeEditor editor={htmlEditor} height={sizes[0]} title=\"HTML\" defaultLanguage=\"html\" defaultValue=\"\" />\r\n        ) : null}\r\n        {cssEditor ? (\r\n          <CodeEditor editor={cssEditor} height={sizes[0]} title=\"CSS\" defaultLanguage=\"css\" defaultValue=\"\" />\r\n        ) : null}\r\n        {jsEditor ? (\r\n          <CodeEditor editor={jsEditor} height={sizes[0]} title=\"JS\" defaultLanguage=\"javascript\" defaultValue=\"\" />\r\n        ) : null}\r\n      </ReactSplit>\r\n\r\n      <div className={classes.wrap}>\r\n        <div className={classes.preview}>\r\n          <div className={classes.header}>\r\n            <div className={classes.headerLeft}>\r\n              <ButtonSpinner\r\n                className={classes.btn}\r\n                size=\"xs\"\r\n                color=\"red\"\r\n                type={'button'}\r\n                appearance={'primary'}\r\n                label={'Exit Editor'}\r\n                isLoading={false}\r\n                disabled={isSaving}\r\n                onClick={exitEditorHandler}\r\n              />\r\n\r\n              {saveAndExitHandler ? (\r\n                <ButtonSpinner\r\n                  className={classes.btn}\r\n                  size=\"xs\"\r\n                  color=\"green\"\r\n                  type={'button'}\r\n                  appearance={'primary'}\r\n                  label={'Save And Exit'}\r\n                  isLoading={false}\r\n                  disabled={isSaving}\r\n                  onClick={saveAndExitHandler}\r\n                />\r\n              ) : (\r\n                <div />\r\n              )}\r\n            </div>\r\n\r\n            <div className={classes.headerRight}>\r\n              <ButtonSpinner\r\n                className={classes.btn}\r\n                size=\"xs\"\r\n                color=\"blue\"\r\n                type={'button'}\r\n                appearance={'primary'}\r\n                label={'Update Preview'}\r\n                isLoading={false}\r\n                disabled={!hasChanges || isSaving}\r\n                onClick={updateHandler}\r\n              />\r\n\r\n              <ButtonSpinner\r\n                className={classes.btn}\r\n                size=\"xs\"\r\n                color=\"green\"\r\n                type={'button'}\r\n                appearance={'primary'}\r\n                label={actionLabel}\r\n                isLoading={isSaving}\r\n                disabled={isSaving}\r\n                onClick={saveHandler}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className={classes.postContainer}>\r\n            <div className={classes.post}>{children}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ReactSplit>\r\n  );\r\n};\r\n\r\nexport default SplitCodeEditor;\r\n","import { useEffect, useRef, useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nexport default function usePostEditor(code: string | undefined, setHasChanges: (b: boolean) => void, language: string) {\r\n  const location = useLocation(); //\r\n  const editorUnsavedChangesKey = location.pathname.replace('/', '') + language;\r\n  const editorThemeKey = location.pathname.replace('/', '') + language;\r\n\r\n  // editor state\r\n  const [value, setValue] = useState<string>('');\r\n  const [theme, setTheme] = useState<string>('vs-dark');\r\n\r\n  // editor ref\r\n  const editorRef = useRef<any>(null);\r\n\r\n  /**\r\n   * Updates the editor original code value\r\n   */\r\n  useEffect(() => {\r\n    let mounted = true;\r\n\r\n    if (mounted && code) {\r\n      setValue(code);\r\n    }\r\n\r\n    return () => {\r\n      mounted = false;\r\n    };\r\n  }, [code]);\r\n\r\n  /**\r\n   * Updates the editor state\r\n   * 1. updates code value + localstorage\r\n   * 2. updates hasChanges state\r\n   * @param val The new code value\r\n   */\r\n  const handleEditorChange = (val: string | undefined): void => {\r\n    if (val) {\r\n      localStorage[editorUnsavedChangesKey] = val;\r\n      setValue(val);\r\n    } else {\r\n      localStorage[editorUnsavedChangesKey] = '';\r\n      setValue('');\r\n    }\r\n\r\n    // only mark as changes if new value is different from original value and original\r\n    // is not empty\r\n    if (value !== val && value !== '') {\r\n      setHasChanges(true);\r\n    } else {\r\n      setHasChanges(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Updates the editor ref when the Editor component mounts\r\n   * @param editor \r\n   */\r\n  const handleEditorDidMount = (editor: any): void => {\r\n    editorRef.current = editor;\r\n  };\r\n\r\n  /**\r\n   * Returns total count for lines of code\r\n   * @returns \r\n   * - Number for total lines of code\r\n   */\r\n  const getLinesCount = (): number => {\r\n    if (editorRef && editorRef.current) return editorRef.current.getModel().getLineCount();\r\n\r\n    return 0;\r\n  };\r\n\r\n  /**\r\n   * Updates the editors theme and stores the change in local storage\r\n   * @param newTheme\r\n   */\r\n  const updateTheme = (newTheme: string) => {\r\n    localStorage[editorThemeKey] = newTheme;\r\n    setTheme(newTheme);\r\n  };\r\n\r\n  return { value, theme, handleEditorDidMount, handleEditorChange, getLinesCount, updateTheme };\r\n}\r\n","import { useLocation, useNavigate } from 'react-router-dom';\r\nimport { useAppSelector } from 'store/hooks';\r\nimport { getHistory, getPreviousPath } from 'store/slices/userSessionSlice';\r\n\r\n/**\r\n *\r\n * @returns\r\n */\r\nexport default function usePreviousPathNav() {\r\n  const { pathname } = useLocation();\r\n  // get react router navigate\r\n  const navigate = useNavigate();\r\n\r\n  // get previous path\r\n  const prevPath = useAppSelector(getPreviousPath);\r\n\r\n  const history = useAppSelector(getHistory);\r\n\r\n  const goBack = () => {\r\n    const length = history.length;\r\n\r\n    if (length === 1) {\r\n      // go to stored previous path\r\n      navigate(prevPath);\r\n    } else {\r\n      if (history[history.length - 2] === pathname) {\r\n        navigate('/');\r\n      } else {\r\n        navigate(history[history.length - 2]);\r\n      }\r\n    }\r\n  };\r\n\r\n  return { goBack };\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { serverErrorHandler } from 'services/server-error.service';\r\nimport { useAppDispatch, useAppSelector } from 'store/hooks';\r\nimport { getPreviousPath, logout } from 'store/slices/userSessionSlice';\r\nimport { ICode } from 'interfaces/post.interface';\r\nimport { createPostApi } from 'api/post.api';\r\nimport { CreateHustlencodePostDto } from 'dtos/hustlencode-post.dto';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { IServerResponse } from 'interfaces/server.interface';\r\nimport { openSuccessToaster } from 'services/toast.service';\r\n\r\nconst POST_INIT = {\r\n  html: '',\r\n  css: '',\r\n  js: '',\r\n  linesOfCode: 0,\r\n};\r\n\r\nexport default function useCreatePost(id: string | undefined) {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  // setup localstorage keys using the current location\r\n  const htmlChangesKey = location.pathname.replace('/', '') + 'html';\r\n  const cssChangesKey = location.pathname.replace('/', '') + 'css';\r\n  const jsChangesKey = location.pathname.replace('/', '') + 'js';\r\n\r\n  // tracks if the post content is being updated\r\n  const [isSaving, setIsSaving] = useState<boolean>(false);\r\n  // content for post\r\n  const [value, setValue] = useState<ICode>(POST_INIT);\r\n  // determines if modal for unsaved changes is hidden or shown\r\n  const [showUnsavedChanges, setShowUnsavedChanges] = useState<boolean>(false);\r\n  // tracks if the editors contain updated code\r\n  const [hasChanges, setHasChanges] = useState<boolean>(false);\r\n\r\n  // redux dispatcher\r\n  const dispatch = useAppDispatch();\r\n\r\n  // clears user session data and logs user out\r\n  const logoutHandler = () => dispatch(logout());\r\n\r\n  // get previous path\r\n  const prevPath = useAppSelector(getPreviousPath);\r\n\r\n  /**\r\n   * Check if there are any unsaved changes\r\n   */\r\n  useEffect(() => {\r\n    let mounted = true;\r\n\r\n    if (mounted) {\r\n      if (localStorage[htmlChangesKey] || localStorage[cssChangesKey] || localStorage[jsChangesKey]) {\r\n        setShowUnsavedChanges(true);\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      mounted = false;\r\n    };\r\n  }, [htmlChangesKey, cssChangesKey, jsChangesKey]);\r\n\r\n  /**\r\n   * Makes request to make post\r\n   * @param payload The post data\r\n   */\r\n  const saveChanges = async (payload: CreateHustlencodePostDto) => {\r\n    try {\r\n      setIsSaving(true);\r\n\r\n      // make request to update post\r\n      const response: IServerResponse = await createPostApi(payload);\r\n\r\n      // show success message\r\n      openSuccessToaster(response.message, 3000);\r\n\r\n      // hide loader\r\n      setIsSaving(false);\r\n\r\n      // clear unsaved changes\r\n      clearStorage();\r\n      setHasChanges(false);\r\n\r\n      // exit\r\n      navigate(prevPath);\r\n    } catch (e) {\r\n      setIsSaving(false);\r\n      serverErrorHandler(e, logoutHandler);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Removes unsaved changes from local storage\r\n   */\r\n  const clearStorage = () => {\r\n    localStorage.removeItem(htmlChangesKey);\r\n    localStorage.removeItem(cssChangesKey);\r\n    localStorage.removeItem(jsChangesKey);\r\n  };\r\n\r\n  /**\r\n   * Hides modal for restoring unsaved changes\r\n   */\r\n  const closeModal = () => {\r\n    setShowUnsavedChanges(false);\r\n  };\r\n\r\n  /**\r\n   * Restores unsaved code\r\n   */\r\n  const applyUnsavedChanges = () => {\r\n    const updatedPost: ICode = {\r\n      html: '',\r\n      css: '',\r\n      js: '',\r\n      linesOfCode: 0,\r\n    };\r\n\r\n    // apply html changes\r\n    if (localStorage[htmlChangesKey]) {\r\n      updatedPost.html = localStorage[htmlChangesKey];\r\n    }\r\n    // apply css changes\r\n    if (localStorage[cssChangesKey]) {\r\n      updatedPost.css = localStorage[cssChangesKey];\r\n    }\r\n    // apply js changes\r\n    if (localStorage[jsChangesKey]) {\r\n      updatedPost.js = localStorage[jsChangesKey];\r\n    }\r\n\r\n    // update post value\r\n    setValue({ ...updatedPost });\r\n\r\n    // clear unsaved changes and hide modal\r\n    discardChanges();\r\n  };\r\n\r\n  /**\r\n   * Removes unsaved changes from local storage\r\n   */\r\n  const discardChanges = () => {\r\n    clearStorage();\r\n    closeModal();\r\n  };\r\n\r\n  return {\r\n    value,\r\n    showUnsavedChanges,\r\n    hasChanges,\r\n    isSaving,\r\n    setHasChanges,\r\n    setIsSaving,\r\n    setValue,\r\n    saveChanges,\r\n    applyUnsavedChanges,\r\n    discardChanges,\r\n    closeModal,\r\n    // saveAndExit,\r\n  };\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"CreatePost_container__j3WV3\",\"wrap\":\"CreatePost_wrap__E2uuU\",\"preview\":\"CreatePost_preview__T4gdp\",\"header\":\"CreatePost_header__jSBMy\",\"btn\":\"CreatePost_btn__wkbJM\",\"headerLeft\":\"CreatePost_headerLeft__L1HVr\",\"headerRight\":\"CreatePost_headerRight__eFXs9\",\"postContainer\":\"CreatePost_postContainer__wZ5wr\",\"post\":\"CreatePost_post__suwCb\",\"unsavedChanges\":\"CreatePost_unsavedChanges__uOuIH\",\"moduleContainer\":\"CreatePost_moduleContainer__erEz1\"};","import { useParams } from 'react-router-dom';\r\nimport pageLayoutClasses from 'styles/modules/pageLayout.module.scss';\r\nimport usePostEditor from 'hooks/editor/usePostEditor';\r\nimport { CreateHustlencodePostDto } from 'dtos/hustlencode-post.dto';\r\nimport useIsMobile from 'hooks/shared/useIsMobile';\r\nimport MobileTabs from '../../../components/MobileCodeEditor/MobileCodeEditor';\r\nimport SplitCodeEditor from '../../../components/SplitCodeEditor/SplitCodeEditor';\r\nimport { Button, Modal } from 'rsuite';\r\nimport Aux from 'components/_Aux/_Aux';\r\nimport useCreatePost from 'hooks/posts/useCreatePost';\r\nimport { useAppSelector } from 'store/hooks';\r\nimport { openErrorToaster } from 'services/toast.service';\r\nimport PostPreviewModule from 'components/PostPreviewModule/PostPreviewModule';\r\nimport PageLoader from 'components/PageLoader/PageLoader';\r\nimport usePreviousPathNav from 'hooks/shared/usePreviousPathNav';\r\nimport { getUser } from 'store/slices/userSessionSlice';\r\n// styles\r\nimport classes from './CreatePost.module.scss';\r\n\r\nconst CreatePost = () => {\r\n  const user = useAppSelector(getUser);\r\n\r\n  // get route params the post _id\r\n  const { id } = useParams();\r\n\r\n  // gets the create post hook\r\n  const createPost = useCreatePost(id);\r\n\r\n  // gets the html editor state\r\n  const htmlEditor = usePostEditor(createPost.value?.html, createPost.setHasChanges, 'html');\r\n\r\n  // gets the css editor state\r\n  const cssEditor = usePostEditor(createPost.value?.css, createPost.setHasChanges, 'css');\r\n\r\n  // gets the js editor state\r\n  const jsEditor = usePostEditor(createPost.value?.js, createPost.setHasChanges, 'js');\r\n\r\n  // tracks is screen width is within mobile range\r\n  const isMobile = useIsMobile();\r\n\r\n  // get hook navigating to prev path\r\n  const prevPath = usePreviousPathNav();\r\n\r\n  /**\r\n   * Calls method to update the post preview\r\n   */\r\n  const updateHandler = () => {\r\n    // get total lines of code for each editor\r\n    const linesOfCode = htmlEditor.getLinesCount() + cssEditor.getLinesCount() + jsEditor.getLinesCount();\r\n\r\n    // update preview\r\n    createPost.setValue({ html: htmlEditor.value, css: cssEditor.value, js: jsEditor.value, linesOfCode });\r\n  };\r\n\r\n  /**\r\n   * Constructs the payload using the code values\r\n   * and calls method to make server req\r\n   */\r\n  const saveHandler = async () => {\r\n    if (!areEditorsEmpty()) {\r\n      // get total lines of code for each editor\r\n      const linesOfCode = htmlEditor.getLinesCount() + cssEditor.getLinesCount() + jsEditor.getLinesCount();\r\n\r\n      // construct create payload\r\n      const payload: CreateHustlencodePostDto = {\r\n        html: htmlEditor.value,\r\n        css: cssEditor.value,\r\n        js: jsEditor.value,\r\n        linesOfCode,\r\n      };\r\n\r\n      // save post data\r\n      await createPost.saveChanges(payload);\r\n    } else {\r\n      openErrorToaster('Please write some code code first.', 3000);\r\n    }\r\n  };\r\n\r\n  const areEditorsEmpty = (): boolean => {\r\n    if (htmlEditor.value.trim() === '' && cssEditor.value.trim() === '' && jsEditor.value.trim() === '') return true;\r\n\r\n    return false;\r\n  };\r\n\r\n  /**\r\n   * Navigates user to profile page\r\n   */\r\n  const exitEditorHandler = () => {\r\n    prevPath.goBack();\r\n  };\r\n\r\n  const renderPostEditors = () => (\r\n    <Aux>\r\n      {isMobile.value ? (\r\n        <MobileTabs\r\n          htmlEditor={htmlEditor}\r\n          cssEditor={cssEditor}\r\n          jsEditor={jsEditor}\r\n          exitEditorHandler={exitEditorHandler}\r\n          saveHandler={saveHandler}\r\n          isSaving={createPost.isSaving}\r\n          actionLabel=\"Create Post\"\r\n          updateHandler={updateHandler}\r\n        >\r\n          {user && createPost.value ? (\r\n            <PostPreviewModule postCode={createPost.value} createdOn={new Date()} postUser={user} />\r\n          ) : (\r\n            <PageLoader style={{ height: '100%', width: '100%' }} isVisible={true} fullscreen={false} theme={'light'} />\r\n          )}\r\n        </MobileTabs>\r\n      ) : (\r\n        <SplitCodeEditor\r\n          htmlEditor={htmlEditor}\r\n          cssEditor={cssEditor}\r\n          jsEditor={jsEditor}\r\n          exitEditorHandler={exitEditorHandler}\r\n          updateHandler={updateHandler}\r\n          saveHandler={saveHandler}\r\n          isSaving={createPost.isSaving}\r\n          hasChanges={createPost.hasChanges}\r\n          actionLabel=\"Create Post\"\r\n        >\r\n          {user && createPost.value ? (\r\n            <div className={classes.moduleContainer}>\r\n              {' '}\r\n              <PostPreviewModule postCode={createPost.value} createdOn={new Date()} postUser={user} />\r\n            </div>\r\n          ) : (\r\n            <div />\r\n          )}\r\n        </SplitCodeEditor>\r\n      )}\r\n    </Aux>\r\n  );\r\n\r\n  return (\r\n    <div className={`${pageLayoutClasses.pageWrapper} ${classes.container}`} id=\"wrapper\">\r\n      <Modal\r\n        backdrop=\"static\"\r\n        role=\"alertdialog\"\r\n        open={createPost.showUnsavedChanges}\r\n        onClose={createPost.closeModal}\r\n        size=\"xs\"\r\n      >\r\n        <Modal.Body>\r\n          <p>Would you like to restore unsaved changes?</p>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button onClick={createPost.applyUnsavedChanges} appearance=\"primary\">\r\n            Restore Changes\r\n          </Button>\r\n          <Button onClick={createPost.discardChanges} appearance=\"subtle\">\r\n            Discard\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n      {renderPostEditors()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreatePost;\r\n"],"names":["props","title","editor","defaultValue","defaultLanguage","height","className","classes","style","width","backgroundColor","onMount","handleEditorDidMount","value","onChange","handleEditorChange","theme","options","scrollBeyondLastLine","minimap","enabled","isSaving","htmlEditor","cssEditor","jsEditor","actionLabel","children","exitEditorHandler","saveAndExitHandler","saveHandler","updateHandler","useState","tabs","setTabs","length","activeTab","setActiveTab","useEffect","mounted","t","push","label","getTabs","getTabIndex","map","indexOf","i","Button","onClick","display","CodeEditor","ButtonSpinner","size","color","type","appearance","isLoading","disabled","postUser","createdOn","postCode","setHeight","code","css","html","js","src","getProfileImage","profileImg","gender","alt","name","FromNowDate","date","Date","getTime","srcDoc","onLoad","e","h","target","contentWindow","document","getElementById","offsetHeight","hasChanges","sizes","setSizes","gutterClassName","draggerClassName","direction","SplitDirection","onResizeFinished","gutterIdx","allSizes","initialSizes","usePostEditor","setHasChanges","language","location","useLocation","editorUnsavedChangesKey","pathname","replace","editorThemeKey","setValue","setTheme","editorRef","useRef","current","val","localStorage","getLinesCount","getModel","getLineCount","updateTheme","newTheme","usePreviousPathNav","navigate","useNavigate","prevPath","useAppSelector","getPreviousPath","history","getHistory","goBack","POST_INIT","linesOfCode","user","getUser","createPost","useParams","id","htmlChangesKey","cssChangesKey","jsChangesKey","setIsSaving","showUnsavedChanges","setShowUnsavedChanges","dispatch","useAppDispatch","logoutHandler","logout","saveChanges","payload","createPostApi","response","openSuccessToaster","message","clearStorage","serverErrorHandler","removeItem","closeModal","discardChanges","applyUnsavedChanges","updatedPost","useCreatePost","isMobile","useIsMobile","areEditorsEmpty","openErrorToaster","trim","pageLayoutClasses","Modal","backdrop","role","open","onClose","PostPreviewModule","PageLoader","isVisible","fullscreen","SplitCodeEditor"],"sourceRoot":""}