{"version":3,"file":"static/js/933.3044f34e.chunk.js","mappings":"6TAOMA,EAAQ,uBAQDC,EAAwB,mCAAG,WAAOC,GAAP,gFAChCC,EADgC,UACvBH,GADuB,SAGfI,EAAAA,EAAAA,IAAuBD,EAAKD,GAHb,cAGhCG,EAHgC,yBAK/BA,EAASC,MALsB,2CAAH,sDAaxBC,EAAqB,mCAAG,WAAOC,GAAP,gFAC7BL,EAD6B,UACpBH,EADoB,qBACCQ,GADD,SAGZJ,EAAAA,EAAAA,IAAuBD,GAHX,cAG7BE,EAH6B,yBAM5BA,EAASC,MANmB,2CAAH,sDAcrBG,EAAwB,mCAAG,WACtCP,GADsC,gFAGhCC,EAHgC,UAGvBH,EAHuB,sBAKfI,EAAAA,EAAAA,IAAuBD,EAAKD,GALb,cAKhCG,EALgC,yBAQ/BA,EAASC,MARsB,2CAAH,sDAkBxBI,EAAuB,mCAAG,WACrCR,GADqC,gFAG/BC,EAH+B,UAGtBH,EAHsB,qBAKdI,EAAAA,EAAAA,IAAuBD,EAAKD,GALd,cAK/BG,EAL+B,yBAQ9BA,EAASC,MARqB,2CAAH,sDAkBvBK,EAAyB,mCAAG,WAAOT,GAAP,kFACjCC,EADiC,UACxBH,EADwB,kBAIjCY,EAA6B,CACjCC,QAAS,CACP,eAAgB,wBANmB,SAWgBT,EAAAA,EAAAA,IAAkBD,EAAKD,EAASU,GAXhD,cAWjCP,EAXiC,yBAahCA,EAASC,MAbuB,2CAAH,sDAuBzBQ,EAA8B,mCAAG,WAAOZ,GAAP,kFACtCC,EADsC,UAC7BH,EAD6B,wBAItCY,EAA6B,CACjCC,QAAS,CACP,eAAgB,wBANwB,SAWWT,EAAAA,EAAAA,IAAkBD,EAAKD,EAASU,GAX3C,cAWtCP,EAXsC,yBAarCA,EAASC,MAb4B,2CAAH,uD,mRCxFnCS,EAAeC,EAAAA,EAAAA,MAAAA,WAEjBC,EAAY,CAAET,SAAU,GAAIU,MAAO,IAOnCC,EAAQH,EAAAA,EAAAA,MAAa,CACzBR,SAAUO,IAAaK,WAAW,4BAClCF,MAAOH,IAAaK,WAAW,0BAA0BC,QAAQ,iC,8GCQnE,GAjB0BC,EAAAA,EAAAA,aAAW,SAACC,EAAuBC,GAC3D,MAAsFD,EAA9EE,WAAAA,OAAR,WAAsFF,EAA1DG,YAAAA,OAA5B,MAA0C,GAA1C,EAA8CC,EAAwCJ,EAAxCI,KAAMC,EAAkCL,EAAlCK,cAAeC,EAAmBN,EAAnBM,MAAUC,GAA7E,OAAsFP,EAAtF,GAEA,OACE,UAACQ,EAAA,QAAD,CAAYP,IAAKA,EAAKQ,UAAWC,EAAAA,EAAAA,UAAjC,WACE,UAACF,EAAA,eAAD,CAAmBC,UAAWC,EAAAA,EAAAA,UAA9B,UAAkDJ,EAAlD,OACCJ,GACC,SAACM,EAAA,WAAD,QAAcN,YAAU,EAACC,YAAaA,EAAaC,KAAMA,EAAMO,SAAUC,EAAAA,GAAgBL,KAEzF,SAACC,EAAA,WAAD,QAAcL,YAAaA,EAAaC,KAAMA,EAAMO,SAAUC,EAAAA,GAAgBL,IAG/EF,EAAgBA,IAAkB,W,sBC1BzC,GAAgB,eAAiB,4CAA4C,QAAU,qCAAqC,cAAgB,2CAA2C,gBAAkB,6CAA6C,gBAAkB,8CCmFxQ,EAlE4B,WAC1B,IAAMQ,EHQO,WACb,OAA0BC,EAAAA,EAAAA,UAA8CpB,GAAxE,eAAOqB,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAoDJ,EAAAA,EAAAA,WAAS,GAA7D,eAAOK,EAAP,KAA2BC,EAA3B,KACA,GAA8CN,EAAAA,EAAAA,WAAS,GAAvD,eAAOO,EAAP,KAAwBC,EAAxB,KACA,GAA8CR,EAAAA,EAAAA,UAAwB,MAAtE,eAAOS,EAAP,KAAwBC,EAAxB,KAGMC,GAAWC,EAAAA,EAAAA,KAGXC,GAAOC,EAAAA,EAAAA,GAAeC,EAAAA,IAEtBC,EAAgB,kBAAML,GAASM,EAAAA,EAAAA,SAGrCC,EAAAA,EAAAA,YAAU,WACR,IAAIC,GAAU,EAMd,OAJIA,GAAWN,GACbX,GAAS,kBAAKtB,GAAN,IAAiBT,SAAU0C,EAAK1C,SAAUU,MAAOgC,EAAKhC,SAGzD,WACLsC,GAAU,KAEX,CAACN,IAOJ,IAAMO,EAAkB,mCAAG,WAAOC,GAAP,0EACN,KAAfA,EAAIC,OADiB,2CAImBpD,EAAAA,EAAAA,IAAsBmD,GAJzC,OAIfrD,EAJe,OAMrBsC,GAAsB,GAEtBE,EAAmBxC,EAASH,SAC5B6C,EAAmB1C,EAASuD,SATP,kDAWrBjB,GAAsB,IACtBkB,EAAAA,EAAAA,GAAmB,EAAD,GAAIR,GAZD,0DAAH,sDAsBlBS,GAAyBC,EAAAA,EAAAA,UAC7B,kBAAMC,GAAAA,CAASP,EAAoB,OAGnC,IAOIQ,EAAM,mCAAG,kGAGPC,EAAAA,EAAAA,IAAwB/C,EAAMgD,MAAM7B,IAH7B,uBAKTG,GAAa,GALJ,UAQ+BxC,EAAAA,EAAAA,IAAyBqC,GARxD,OAQHjC,EARG,QAWT+D,EAAAA,EAAAA,IAAmB/D,EAASuD,QAAS,MAGrCnB,GAAa,GAGbO,GAASqB,EAAAA,EAAAA,IAAQhE,EAASH,UAjBjB,yDAqBXuC,GAAa,IACboB,EAAAA,EAAAA,GAAmB,EAAD,GAAIR,GAtBX,0DAAH,qDAgDZ,MAAO,CAAEX,mBAAAA,EAAoBvB,MAAAA,EAAOmB,MAAAA,EAAOE,UAAAA,EAAWI,gBAAAA,EAAiBE,gBAAAA,EAAiBmB,OAAAA,EAAQK,SAhB/E,SAACZ,GAOZA,EAAIlD,SAASmD,UAAb,OAAwBT,QAAxB,IAAwBA,OAAxB,EAAwBA,EAAM1C,WAAoC,KAAxBkD,EAAIlD,SAASmD,QAAiBD,EAAIlD,WAAa8B,EAAM9B,UACjGmC,GAAsB,GACtBmB,EAAuBJ,EAAIlD,WACtBmC,GAAsB,GAG7BJ,EAASmB,KGvHEa,GAGPrB,GAAOC,EAAAA,EAAAA,GAAeC,EAAAA,IA0B5B,OACE,gBAAKpB,UAAWC,EAAAA,eAAhB,UACE,UAACF,EAAA,EAAD,CACEyC,UAAWpC,EAAKE,MAChBmC,OAAO,EACPzC,UAAWC,EAAAA,WACXd,MAAOiB,EAAKjB,MACZmD,SAAU,SAACZ,GAAD,OAActB,EAAKkC,SAASZ,IALxC,WAOE,SAAC,EAAD,CACE9B,cAxBsB,WAE5B,OAAIQ,EAAKE,MAAM9B,YAAX,OAAwB0C,QAAxB,IAAwBA,OAAxB,EAAwBA,EAAM1C,WAA2C,KAA/B4B,EAAKE,MAAM9B,SAASmD,OAE5DvB,EAAKM,oBACA,SAAC,IAAD,CAAiBV,UAAWC,EAAAA,gBAAyByC,KAAMC,EAAAA,IAAWC,MAAI,KAE1E,cAAG5C,UAAWI,EAAKQ,gBAAkBX,EAAAA,cAAsBA,EAAAA,gBAA3D,SAAqFG,EAAKU,mBAI9F,kBAcD+B,KAAK,OACLlD,KAAK,WACLE,MAAO,WACPH,YAAY,0CAGd,SAACoD,EAAA,EAAD,CAAeD,KAAK,OAAOlD,KAAK,QAAQE,MAAO,WAE/C,SAACkD,EAAA,EAAD,CAAe/C,UAAWC,EAAAA,eAA1B,UACE,SAAC+C,EAAA,EAAD,CACEH,KAAK,SACLI,WAAW,UACXpD,MAAO,eACPW,UAAWJ,EAAKI,UAChB0C,SAAU9C,EAAKM,qBAAuBN,EAAKQ,gBAC3CuC,QAAS/C,EAAK6B,OACdmB,KAAK,KACLpD,UAAWC,EAAAA","sources":["api/account.api.ts","hooks/profile/useEditProfileUsername.ts","components/FormFields/single/UsernameFormField.tsx","webpack://hustlencode.io/./src/pages/edit_profile_pages/EditProfileUsername/EditProfileUsername.module.scss?45f6","pages/edit_profile_pages/EditProfileUsername/EditProfileUsername.tsx"],"sourcesContent":["import { AxiosRequestConfig, AxiosResponse } from 'axios';\r\nimport { UpdateHustlencodeProfileGeneralDto, UpdateHustlencodeProfilePasswordDto } from 'dtos/hustlencode-account.dto';\r\nimport { UpdateHustlencodeProfileGeneral } from 'dtos/hustlencode-profile.dto';\r\nimport { IServerResponse } from 'interfaces/server.interface';\r\nimport axiosInstance from '../config/axios.config';\r\n\r\n// base API path for api requests\r\nconst BASE_URL = `/hustlencode/account`;\r\n\r\n/**\r\n * Makes api request to update the user's username\r\n * and email\r\n * @param payload\r\n * @returns\r\n */\r\nexport const updateProfileUsernameApi = async (payload: UpdateHustlencodeProfileGeneral): Promise<IServerResponse> => {\r\n  const url = `${BASE_URL}`;\r\n\r\n  const response = await axiosInstance.put<any>(url, payload);\r\n\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * Makes API request to check if a username is avaialble\r\n * @param username\r\n * @returns\r\n */\r\nexport const checkUsernameAvailApi = async (username: string): Promise<IServerResponse> => {\r\n  const url = `${BASE_URL}/username/${username}`;\r\n\r\n  const response = await axiosInstance.get<any>(url);\r\n\r\n  // return payload\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * Makes API request to update user's password\r\n * @param payload\r\n * @returns\r\n */\r\nexport const updateProfilePasswordApi = async (\r\n  payload: UpdateHustlencodeProfilePasswordDto,\r\n): Promise<IServerResponse> => {\r\n  const url = `${BASE_URL}/password`;\r\n\r\n  const response = await axiosInstance.put<any>(url, payload);\r\n\r\n  // return payload\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * Makes API request to update user:\r\n * - firstName\r\n * - lastName\r\n * @param payload\r\n * @returns\r\n */\r\nexport const updateProfileGeneralApi = async (\r\n  payload: UpdateHustlencodeProfileGeneralDto,\r\n): Promise<IServerResponse> => {\r\n  const url = `${BASE_URL}/profile`;\r\n\r\n  const response = await axiosInstance.put<any>(url, payload);\r\n\r\n  // return payload\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * Makes api request to upload and update the users\r\n * profile image\r\n * @param payload\r\n * @param id\r\n * @returns\r\n */\r\nexport const updateUserProfileImageApi = async (payload: any) => {\r\n  const url = `${BASE_URL}/profile-image`;\r\n\r\n  // headers for server query\r\n  const config: AxiosRequestConfig = {\r\n    headers: {\r\n      'content-type': 'multipart/form-data',\r\n    },\r\n  };\r\n\r\n  // make server request\r\n  const response: AxiosResponse<IServerResponse> = await axiosInstance.put(url, payload, config);\r\n\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * Makes api request to upload and update the users\r\n * profile cover image\r\n * @param payload\r\n * @param id\r\n * @returns\r\n */\r\nexport const updateUserProfileCoverImageApi = async (payload: any) => {\r\n  const url = `${BASE_URL}/profile-cover-image`;\r\n\r\n  // headers for server query\r\n  const config: AxiosRequestConfig = {\r\n    headers: {\r\n      'content-type': 'multipart/form-data',\r\n    },\r\n  };\r\n\r\n  // make server request\r\n  const response: AxiosResponse<IServerResponse> = await axiosInstance.put(url, payload, config);\r\n\r\n  return response.data;\r\n};\r\n","import { useEffect, useMemo, useState } from 'react';\r\nimport { Schema } from 'rsuite';\r\nimport { useAppDispatch, useAppSelector } from 'store/hooks';\r\nimport { getUser, logout, setUser } from 'store/slices/userSessionSlice';\r\nimport { serverErrorHandler } from 'services/server-error.service';\r\nimport { getFormValidationStatus } from 'util/form.util';\r\nimport debounce from 'lodash.debounce';\r\nimport { checkUsernameAvailApi, updateProfileUsernameApi } from 'api/account.api';\r\nimport { IServerResponse } from 'interfaces/server.interface';\r\nimport { openSuccessToaster } from 'services/toast.service';\r\nimport { UpdateHustlencodeProfileUsernameDto } from 'dtos/hustlencode-account.dto';\r\n\r\n// Extract schema types for form validation\r\nconst { StringType } = Schema.Types;\r\n\r\nconst INIT_FORM = { username: '', email: '' };\r\n\r\n/**\r\n * Define validation model for updating profile:\r\n * - username\r\n * - email\r\n */\r\nconst model = Schema.Model({\r\n  username: StringType().isRequired('Please enter a username.'),\r\n  email: StringType().isRequired('Please enter an email.').isEmail('Please enter a valid email.'),\r\n});\r\n\r\nexport default function useEditProfileUsername() {\r\n  const [value, setValue] = useState<UpdateHustlencodeProfileUsernameDto>(INIT_FORM); // set default form values\r\n  const [isLoading, setIsLoading] = useState(false); // flag for submission process\r\n  const [isCheckingUsername, setIsCheckingUsername] = useState(false); // flag for checking username process\r\n  const [isUsernameValid, setIsUsernameValid] = useState(true); // true if username is valid\r\n  const [usernameMessage, setUsernameMessage] = useState<string | null>(null);\r\n\r\n  // get redux store dispatch\r\n  const dispatch = useAppDispatch();\r\n\r\n  // get stored email\r\n  const user = useAppSelector(getUser);\r\n\r\n  const logoutHandler = () => dispatch(logout());\r\n\r\n  // set user's current email and username\r\n  useEffect(() => {\r\n    let mounted = true;\r\n\r\n    if (mounted && user) {\r\n      setValue({ ...INIT_FORM, username: user.username, email: user.email });\r\n    }\r\n\r\n    return () => {\r\n      mounted = false;\r\n    };\r\n  }, [user]);\r\n\r\n  /**\r\n   * Makes API request to check if the username is\r\n   * available\r\n   * @param val\r\n   */\r\n  const asyncCheckUsername = async (val: string): Promise<void> => {\r\n    if (val.trim() !== '') {\r\n      try {\r\n        // make request to check for username availability\r\n        const response: IServerResponse = await checkUsernameAvailApi(val);\r\n        // hide spinner\r\n        setIsCheckingUsername(false);\r\n        // update username status\r\n        setIsUsernameValid(response.payload);\r\n        setUsernameMessage(response.message);\r\n      } catch (e) {\r\n        setIsCheckingUsername(false);\r\n        serverErrorHandler(e, logoutHandler);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * debounce search with 300ms wait time\r\n   * Ignore continous search calls until  timer has\r\n   * elapsed\r\n   */\r\n  const debouncedChangeHandler = useMemo(\r\n    () => debounce(asyncCheckUsername, 300),\r\n    // TODO Resolve 'react-hooks/exhaustive-deps'\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [],\r\n  );\r\n\r\n  /**\r\n   * Makes async request to updated the user's\r\n   * username and email.\r\n   */\r\n  const submit = async () => {\r\n    try {\r\n      // verify that form is valid\r\n      if (getFormValidationStatus(model.check(value))) {\r\n        // show spinner\r\n        setIsLoading(true);\r\n\r\n        // make api req\r\n        const response: IServerResponse = await updateProfileUsernameApi(value);\r\n\r\n        // show success message\r\n        openSuccessToaster(response.message, 3500);\r\n\r\n        // hide spinner\r\n        setIsLoading(false);\r\n\r\n        // update user sesssion data\r\n        dispatch(setUser(response.payload));\r\n      }\r\n    } catch (e) {\r\n      // hide spinner\r\n      setIsLoading(false);\r\n      serverErrorHandler(e, logoutHandler);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Update the form state when the form field values change\r\n   * The username field is checked to ensure that the provided username is\r\n   * avaiable\r\n   * @param val\r\n   */\r\n  const onChange = (val: UpdateHustlencodeProfileUsernameDto) => {\r\n    /**\r\n     * check username if:\r\n     * username is not the same as current username\r\n     * username is not empty\r\n     * username is value has changed\r\n     */\r\n    if (val.username.trim() !== user?.username && val.username.trim() !== '' && val.username !== value.username) {\r\n      setIsCheckingUsername(true);\r\n      debouncedChangeHandler(val.username);\r\n    } else setIsCheckingUsername(false);\r\n\r\n    // check email\r\n    setValue(val);\r\n  };\r\n\r\n  return { isCheckingUsername, model, value, isLoading, isUsernameValid, usernameMessage, submit, onChange };\r\n}\r\n","// styles\r\nimport classes from 'styles/modules/form.module.scss';\r\n\r\nimport { forwardRef, ReactElement } from 'react';\r\nimport { Form, InputGroup } from 'rsuite';\r\n\r\ninterface ITextFormField {\r\n  name: string; // name of the key to map to\r\n  label: string; // field label\r\n  type: 'text' | 'email' | 'number' | 'password';\r\n  placeholder?: string; // field placeholder\r\n  checkAsync?: boolean; // true if we need to perform async checks on form field\r\n  renderMessage?: () => ReactElement<any>;\r\n}\r\n\r\nconst UsernameFormField = forwardRef((props: ITextFormField, ref: any) => {\r\n  const { checkAsync = false, placeholder = '', name, renderMessage, label, ...rest } = props;\r\n\r\n  return (\r\n    <Form.Group ref={ref} className={classes.FormField}>\r\n      <Form.ControlLabel className={classes.FormLabel}>{label} </Form.ControlLabel>\r\n      {checkAsync ? (\r\n        <Form.Control checkAsync placeholder={placeholder} name={name} acceptor={InputGroup} {...rest} />\r\n      ) : (\r\n        <Form.Control placeholder={placeholder} name={name} acceptor={InputGroup} {...rest} />\r\n      )}\r\n\r\n      {renderMessage ? renderMessage() : null}\r\n    </Form.Group>\r\n  );\r\n});\r\n\r\nexport default UsernameFormField;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"FormBtnToolbar\":\"EditProfileUsername_FormBtnToolbar__oh55S\",\"saveBtn\":\"EditProfileUsername_saveBtn__qjdQ3\",\"validUsername\":\"EditProfileUsername_validUsername__qSYcG\",\"invalidUsername\":\"EditProfileUsername_invalidUsername__Njx3G\",\"usernameSpinner\":\"EditProfileUsername_usernameSpinner__4COhh\"};","import { Form, ButtonToolbar } from 'rsuite';\r\nimport TextFormField from 'components/FormFields/single/TextFormField';\r\nimport ButtonSpinner from 'components/Buttons/ButtonSpinner/ButtonSpinner';\r\nimport useEditProfileGeneralForm from 'hooks/profile/useEditProfileUsername';\r\nimport UsernameFormField from 'components/FormFields/single/UsernameFormField';\r\nimport { ReactElement } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport { useAppSelector } from 'store/hooks';\r\nimport { getUser } from 'store/slices/userSessionSlice';\r\n\r\n// styles\r\nimport classes from './EditProfileUsername.module.scss';\r\n\r\n/**\r\n * Render form where user can update their username\r\n * @returns\r\n */\r\nconst EditProfileUsername = () => {\r\n  const form = useEditProfileGeneralForm();\r\n\r\n  // get current use\r\n  const user = useAppSelector(getUser);\r\n\r\n  /**\r\n   * Return message for username status\r\n   * -> return spinner if username is being checked\r\n   * -> return 'username is valid' if username is valid\r\n   * -> return 'username is not valid' if username is taken, or empty, or less than\r\n   * 4 characters\r\n   * -> return empty p element if username has not changed\r\n   *\r\n   * @returns\r\n   */\r\n  const renderUsernameMessage = (): ReactElement<any> => {\r\n    // check if username value is different from current user name\r\n    if (form.value.username !== user?.username && form.value.username.trim() !== '') {\r\n      // return spinner if we are checking username\r\n      if (form.isCheckingUsername) {\r\n        return <FontAwesomeIcon className={classes.usernameSpinner} icon={faSpinner} spin />;\r\n      }else{\r\n        return <p className={form.isUsernameValid ? classes.validUsername:classes.invalidUsername}>{form.usernameMessage}</p>\r\n      }\r\n    }\r\n\r\n    return <p/>\r\n  };\r\n\r\n  return (\r\n    <div className={classes.ContentWrapper}>\r\n      <Form\r\n        formValue={form.value}\r\n        fluid={true}\r\n        className={classes.CustomForm}\r\n        model={form.model}\r\n        onChange={(val: any) => form.onChange(val)}\r\n      >\r\n        <UsernameFormField\r\n          renderMessage={renderUsernameMessage}\r\n          type=\"text\"\r\n          name=\"username\"\r\n          label={'Username'}\r\n          placeholder=\"Example username: firstName_lastName\"\r\n        />\r\n\r\n        <TextFormField type=\"text\" name=\"email\" label={'Email'} />\r\n\r\n        <ButtonToolbar className={classes.FormBtnToolbar}>\r\n          <ButtonSpinner\r\n            type=\"submit\"\r\n            appearance=\"primary\"\r\n            label={'Save Changes'}\r\n            isLoading={form.isLoading}\r\n            disabled={form.isCheckingUsername || !form.isUsernameValid}\r\n            onClick={form.submit}\r\n            size=\"md\"\r\n            className={classes.saveBtn}\r\n          />\r\n        </ButtonToolbar>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditProfileUsername;\r\n"],"names":["BASE_URL","updateProfileUsernameApi","payload","url","axiosInstance","response","data","checkUsernameAvailApi","username","updateProfilePasswordApi","updateProfileGeneralApi","updateUserProfileImageApi","config","headers","updateUserProfileCoverImageApi","StringType","Schema","INIT_FORM","email","model","isRequired","isEmail","forwardRef","props","ref","checkAsync","placeholder","name","renderMessage","label","rest","Form","className","classes","acceptor","InputGroup","form","useState","value","setValue","isLoading","setIsLoading","isCheckingUsername","setIsCheckingUsername","isUsernameValid","setIsUsernameValid","usernameMessage","setUsernameMessage","dispatch","useAppDispatch","user","useAppSelector","getUser","logoutHandler","logout","useEffect","mounted","asyncCheckUsername","val","trim","message","serverErrorHandler","debouncedChangeHandler","useMemo","debounce","submit","getFormValidationStatus","check","openSuccessToaster","setUser","onChange","useEditProfileGeneralForm","formValue","fluid","icon","faSpinner","spin","type","TextFormField","ButtonToolbar","ButtonSpinner","appearance","disabled","onClick","size"],"sourceRoot":""}