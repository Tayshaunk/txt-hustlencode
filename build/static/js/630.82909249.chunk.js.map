{"version":3,"file":"static/js/630.82909249.chunk.js","mappings":"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","sources":["api/profile.api.ts","components/RenderHtml/RenderHtml.tsx","webpack://hustlencode.io/./src/components/TabNavigation/TabNavigation.module.scss?d554","components/TabNavigation/TabNavigation.tsx","webpack://hustlencode.io/./src/pages/profile_pages/Profile/Profile.module.scss?bbae","pages/profile_pages/Profile/Profile.tsx","hooks/profile/useProfile.ts","webpack://hustlencode.io/./src/pages/profile_pages/Profile/components/Cover/Cover.module.scss?3473","pages/profile_pages/Profile/components/Cover/Cover.tsx"],"sourcesContent":["import { UpdateHustlencodeProfileAboutDto, UpdateHustlencodeProfileInterestsDto, UpdateHustlencodeProfileLayoutDto } from 'dtos/hustlencode-profile.dto';\r\nimport { ICode } from 'interfaces/post.interface';\r\nimport { IServerResponse } from 'interfaces/server.interface';\r\nimport axiosInstance from '../config/axios.config';\r\nimport { IHustlencodeUser } from '../interfaces/user.interface';\r\n\r\n// base API path for api requests\r\nconst BASE_URL = `/hustlencode/profile`;\r\n\r\n/**\r\n * Makes API request for users profile data\r\n * @param username The user's username\r\n * @returns\r\n * - User profile data\r\n */\r\nexport const getProfileApi = async (username: string): Promise<IHustlencodeUser> => {\r\n  const url = `${BASE_URL}/${username}`;\r\n\r\n  const response = await axiosInstance.get<any>(url);\r\n\r\n  // return user token\r\n  return response.data.payload;\r\n};\r\n\r\n/**\r\n * Returns Code for the profile about module\r\n * @param username the user's username\r\n * @returns\r\n * - Code for the about module\r\n */\r\nexport const getProfileAboutApi = async (username: string): Promise<ICode> => {\r\n  const url = `${BASE_URL}/${username}/about`;\r\n\r\n  const response = await axiosInstance.get<any>(url);\r\n\r\n  // return user token\r\n  return response.data.payload;\r\n};\r\n\r\n/**\r\n * Returns code for the profile interests module\r\n * @param username the user's username\r\n * @returns\r\n * - Code for the interests module\r\n */\r\nexport const getProfileInterestsApi = async (username: string): Promise<ICode> => {\r\n  const url = `${BASE_URL}/${username}/interests`;\r\n\r\n  const response = await axiosInstance.get<any>(url);\r\n\r\n  // return user token\r\n  return response.data.payload;\r\n};\r\n\r\n\r\n/**\r\n * Returns Code for the profile layout\r\n * @param username the user's username\r\n * @returns\r\n * - Code for layout\r\n */\r\n export const getProfileLayoutApi = async (username: string): Promise<ICode> => {\r\n  const url = `${BASE_URL}/${username}/layout`;\r\n\r\n  const response = await axiosInstance.get<any>(url);\r\n\r\n  // return user token\r\n  return response.data.payload;\r\n};\r\n\r\n/**\r\n * Updates and returns the code for the profile layout\r\n * @param username the user's username\r\n * @param payload The updated code for layout\r\n * @returns\r\n * - The update profile layout code\r\n */\r\n export const updateProfileLayoutApi = async (username: string, payload: UpdateHustlencodeProfileLayoutDto): Promise<IServerResponse> => {\r\n  const url = `${BASE_URL}/${username}/layout`;\r\n\r\n  const response = await axiosInstance.put<any>(url, payload);\r\n\r\n  // return user token\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * Updates and returns the code for the profile about module\r\n * @param username the user's username\r\n * @param payload The updated code for the module\r\n * @returns\r\n * - The update profile about module code\r\n */\r\nexport const updateProfileAboutApi = async (username: string, payload: UpdateHustlencodeProfileAboutDto): Promise<IServerResponse> => {\r\n  const url = `${BASE_URL}/${username}/about`;\r\n\r\n  const response = await axiosInstance.put<any>(url, payload);\r\n\r\n  // return user token\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * Updates and returns the code for the profile interests module\r\n * @param username the user's username\r\n * @param payload The updated code for the interests module\r\n * @returns\r\n * - The the updated interests module\r\n */\r\nexport const updateProfileInterestsApi = async (username: string, payload: UpdateHustlencodeProfileInterestsDto): Promise<IServerResponse> => {\r\n  const url = `${BASE_URL}/${username}/interests`;\r\n\r\n  const response = await axiosInstance.put<any>(url, payload);\r\n\r\n  // return user token\r\n  return response.data;\r\n};\r\n\r\n","const RenderHtml = ({html}:{html:string}) => {\r\n  return <div dangerouslySetInnerHTML={{ __html: html }}></div>;\r\n};\r\n\r\nexport default RenderHtml;","// extracted by mini-css-extract-plugin\nexport default {\"tabButtonToolBar\":\"TabNavigation_tabButtonToolBar__MZGEg\",\"innerContainer\":\"TabNavigation_innerContainer__pGmL4\",\"tab\":\"TabNavigation_tab__D5zTQ\",\"active\":\"TabNavigation_active__O+hD2\"};","import { NavLink } from 'react-router-dom';\r\nimport classes from './TabNavigation.module.scss';\r\n\r\ntype tab = {\r\n  label: string;\r\n  url: string;\r\n};\r\n\r\ninterface IProps {\r\n  tabs: tab[];\r\n}\r\n\r\nconst TabNavigation = ({ tabs }: IProps) => {\r\n  return (\r\n    <div className={classes.tabButtonToolBar}>\r\n      <div className={classes.innerContainer}>\r\n        {tabs.map(t => (\r\n          <NavLink end key={t.url} className={({ isActive }) => `${classes.tab} ${isActive ? classes.active : ''}`} to={t.url}>\r\n            {t.label}\r\n          </NavLink>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TabNavigation;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"profileContainer\":\"Profile_profileContainer__7aCxm\",\"content\":\"Profile_content__tA2nh\",\"rightCol\":\"Profile_rightCol__rJFg0\",\"leftCol\":\"Profile_leftCol__U-wMs\"};","import { Outlet, useParams } from 'react-router-dom';\r\nimport useProfile from 'hooks/profile/useProfile';\r\nimport PageLoader from 'components/PageLoader/PageLoader';\r\nimport Aux from 'components/_Aux/_Aux';\r\nimport { IHustlencodeUser } from 'interfaces/user.interface';\r\nimport Cover from './components/Cover/Cover';\r\nimport RenderHtml from 'components/RenderHtml/RenderHtml';\r\nimport TabNavigation from 'components/TabNavigation/TabNavigation';\r\nimport NotFound from 'components/NotFound/NotFound';\r\n// styles\r\nimport pageLayoutClasses from 'styles/modules/pageLayout.module.scss';\r\nimport classes from './Profile.module.scss';\r\n\r\n/**\r\n * Renders the users profile page.\r\n * The users profile page contains the user's\r\n * posts\r\n * @returns\r\n */\r\nconst Profile = () => {\r\n  const { username } = useParams();\r\n\r\n  // get profile state\r\n  const profile = useProfile(username);\r\n\r\n  const tabs = [\r\n    { label: 'About', url: `/user/${username}` },\r\n    { label: 'Posts', url: `/user/${username}/posts` },\r\n    //  { label: 'Friends', url: `/user/${username}/posts` },\r\n  ];\r\n\r\n  const renderContent = (userProfile: IHustlencodeUser) => (\r\n    <div className={` ${pageLayoutClasses.pageWrapper} ${classes.profileContainer}`} id=\"entry\">\r\n      {/* render profile layout styles */}\r\n      <RenderHtml html={`<style>${userProfile.layoutWidget.css}</style>`} />\r\n\r\n      <div>\r\n        <Cover\r\n          username={userProfile.username}\r\n          coverImage={userProfile.coverImg}\r\n          profileImage={userProfile.profileImg}\r\n          name={userProfile.name}\r\n          gender={userProfile.gender}\r\n        />\r\n      </div>\r\n\r\n      <div className={classes.content}>\r\n        <TabNavigation tabs={tabs} />\r\n\r\n        <Outlet context={{ username: username }} />\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  /**\r\n   * Checks if profile data is not null. Otherwise\r\n   * shows 404 error\r\n   * @returns\r\n   */\r\n  const checkProfile = () => <Aux>{profile.value ? renderContent(profile.value) : <NotFound />}</Aux>;\r\n\r\n  return (\r\n    <Aux>\r\n      {!profile.isLoading ? (\r\n        checkProfile()\r\n      ) : (\r\n        <PageLoader style={{ height: '100vh', width: '100vw' }} isVisible={true} fullscreen={false} theme={'dark'} />\r\n      )}\r\n    </Aux>\r\n  );\r\n};\r\n// && username\r\nexport default Profile;\r\n","import { useEffect, useState } from 'react';\r\nimport { getProfileApi } from 'api/profile.api';\r\nimport { IHustlencodeUser } from 'interfaces/user.interface';\r\nimport { serverErrorHandler } from 'services/server-error.service';\r\nimport { useAppDispatch, useAppSelector } from 'store/hooks';\r\nimport { getUser, logout } from 'store/slices/userSessionSlice';\r\n\r\nexport default function useProfile(username?: string) {\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n  const [value, setValue] = useState<IHustlencodeUser>();\r\n\r\n  // redux dispatcher\r\n  const dispatch = useAppDispatch();\r\n\r\n  // clears user session data and logs user out\r\n  const logoutHandler = () => dispatch(logout());\r\n\r\n  // get user session data\r\n  const user = useAppSelector(getUser);\r\n\r\n  useEffect(\r\n    () => {\r\n      let mounted = true;\r\n\r\n      /**\r\n       * Makes async request for user profile info\r\n       * Profile is stored in state\r\n       * @param username\r\n       */\r\n      async function loadDataAsync(username: string) {\r\n        try {\r\n          setIsLoading(true);\r\n          // request user profile\r\n          const response: IHustlencodeUser = await getProfileApi(username);\r\n    \r\n          // update state\r\n          setValue(response);\r\n          // hide loader\r\n          setIsLoading(false);\r\n        } catch (e) {\r\n          setIsLoading(false);\r\n          serverErrorHandler(e, logoutHandler);\r\n        }\r\n      }\r\n\r\n      if (mounted && username && user) loadDataAsync(username);\r\n      else if(mounted && !username) setIsLoading(false);\r\n\r\n      return () => {\r\n        mounted = false;\r\n      };\r\n    },\r\n    // TODO Resolve 'react-hooks/exhaustive-deps'\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [username, user],\r\n  );\r\n\r\n  return {\r\n    value,\r\n    isLoading,\r\n  };\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Cover_container__pZJ4Y\",\"coverImageContainer\":\"Cover_coverImageContainer__zAg1B\",\"coverImage\":\"Cover_coverImage__6r05u\",\"details\":\"Cover_details__OOYAO\",\"content\":\"Cover_content__yycHl\",\"profileImageContainer\":\"Cover_profileImageContainer__QFB9T\",\"nameContainer\":\"Cover_nameContainer__qe2NN\",\"actions\":\"Cover_actions__wsICk\"};","import IsAuthed from 'components/IsAuthed/IsAuthed';\r\nimport ProfileImage from 'components/ProfileImage/ProfileImage';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { getProfileCoverImage } from 'util/profile.util';\r\n\r\n// styles\r\nimport classes from './Cover.module.scss';\r\n\r\ninterface IProps {\r\n  coverImage: string | null; // url for the cover image\r\n  profileImage: string | null; // url for the profile image\r\n  name: string;\r\n  gender: Gender;\r\n  username: string;\r\n}\r\n\r\n/**\r\n * Renders a view with a welcome message and Login\r\n * Form. Users are able to sign in with their credentials\r\n * @returns\r\n */\r\nconst Profile = (props: IProps) => {\r\n  const { coverImage, profileImage, name, gender, username } = props;\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <div className={classes.coverImageContainer}>\r\n        {coverImage ? (\r\n          <img className={classes.coverImage} src={getProfileCoverImage(coverImage)} alt=\"profile cover\" />\r\n        ) : null}\r\n      </div>\r\n\r\n      <div className={classes.details}>\r\n        <div className={classes.content}>\r\n          <div className={classes.profileImageContainer}>\r\n            <ProfileImage gender={gender} url={profileImage} />\r\n          </div>\r\n          <div className={classes.nameContainer}>\r\n            <h1>{name}</h1>\r\n            <p>{username}</p>\r\n          </div>\r\n        </div>\r\n        <IsAuthed type=\"username\" value={username}>\r\n          <div className={classes.actions}>\r\n            <NavLink to=\"/account\">Edit Profile</NavLink>\r\n          </div>\r\n        </IsAuthed>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n"],"names":["BASE_URL","getProfileApi","username","url","axiosInstance","response","data","payload","getProfileAboutApi","getProfileInterestsApi","getProfileLayoutApi","updateProfileLayoutApi","updateProfileAboutApi","updateProfileInterestsApi","html","dangerouslySetInnerHTML","__html","tabs","className","classes","map","t","end","isActive","to","label","useParams","profile","useState","isLoading","setIsLoading","value","setValue","dispatch","useAppDispatch","logoutHandler","logout","user","useAppSelector","getUser","useEffect","mounted","serverErrorHandler","loadDataAsync","useProfile","PageLoader","style","height","width","isVisible","fullscreen","theme","userProfile","pageLayoutClasses","id","RenderHtml","layoutWidget","css","Cover","coverImage","coverImg","profileImage","profileImg","name","gender","context","NotFound","checkProfile","props","src","getProfileCoverImage","alt","ProfileImage","IsAuthed","type"],"sourceRoot":""}